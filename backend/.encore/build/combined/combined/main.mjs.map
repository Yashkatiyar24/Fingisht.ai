{
  "version": 3,
  "sources": ["../../../../encore.gen/internal/auth/auth.ts", "../../../../encore.gen/auth/index.ts", "../../../../encore.gen/internal/entrypoints/combined/main.ts", "../../../../auth/auth.ts", "../../../../ai/apply_suggestion.ts", "../../../../external_dbs/postgres/db.ts", "../../../../ai/categorize_batch.ts", "../../../../ai/detect_anomalies.ts", "../../../../ai/get_settings.ts", "../../../../ai/insights.ts", "../../../../auth/clerk_webhook.ts", "../../../../auth/user.ts", "../../../../budget/create.ts", "../../../../db/index.ts", "../../../../budget/list.ts", "../../../../category/create.ts", "../../../../category/list.ts", "../../../../category/rules.ts", "../../../../dashboard/stats.ts", "../../../../transaction/create.ts", "../../../../transaction/delete.ts", "../../../../transaction/list.ts", "../../../../transaction/update.ts", "../../../../upload/upload.ts", "../../../../budget/encore.service.ts", "../../../../transaction/encore.service.ts", "../../../../ai/encore.service.ts", "../../../../auth/encore.service.ts", "../../../../dashboard/encore.service.ts", "../../../../category/encore.service.ts", "../../../../upload/encore.service.ts"],
  "sourcesContent": ["import { getAuthData as _getAuthData } from \"encore.dev/internal/codegen/auth\";\nimport { auth as _auth_auth } from \"../../../auth/auth.js\";\n\nexport type AuthData = Awaited<ReturnType<typeof _auth_auth>>;\n\nexport function getAuthData(): AuthData | null {\n    return _getAuthData()\n}\n\ndeclare module \"encore.dev/api\" {\n  interface CallOpts {\n    authData?: AuthData;\n  }\n}\n\n", "export {type AuthData, getAuthData} from \"../internal/auth/auth\";", "import { registerGateways, registerHandlers, run, type Handler } from \"encore.dev/internal/codegen/appinit\";\n\nimport { gw as api_gatewayGW } from \"../../../../auth/auth\";\nimport { applySuggestion as ai_applySuggestionImpl0 } from \"../../../../ai/apply_suggestion\";\nimport { categorizeBatch as ai_categorizeBatchImpl1 } from \"../../../../ai/categorize_batch\";\nimport { detectAnomalies as ai_detectAnomaliesImpl2 } from \"../../../../ai/detect_anomalies\";\nimport { detectAnomaliesCron as ai_detectAnomaliesCronImpl3 } from \"../../../../ai/detect_anomalies\";\nimport { getAnomalies as ai_getAnomaliesImpl4 } from \"../../../../ai/detect_anomalies\";\nimport { acknowledgeAnomaly as ai_acknowledgeAnomalyImpl5 } from \"../../../../ai/detect_anomalies\";\nimport { getSettings as ai_getSettingsImpl6 } from \"../../../../ai/get_settings\";\nimport { updateSettings as ai_updateSettingsImpl7 } from \"../../../../ai/get_settings\";\nimport { getInsights as ai_getInsightsImpl8 } from \"../../../../ai/insights\";\nimport { clerkWebhook as auth_clerkWebhookImpl9 } from \"../../../../auth/clerk_webhook\";\nimport { getUserInfo as auth_getUserInfoImpl10 } from \"../../../../auth/user\";\nimport { create as budget_createImpl11 } from \"../../../../budget/create\";\nimport { list as budget_listImpl12 } from \"../../../../budget/list\";\nimport { create as category_createImpl13 } from \"../../../../category/create\";\nimport { list as category_listImpl14 } from \"../../../../category/list\";\nimport { listRules as category_listRulesImpl15 } from \"../../../../category/rules\";\nimport { createRule as category_createRuleImpl16 } from \"../../../../category/rules\";\nimport { getStats as dashboard_getStatsImpl17 } from \"../../../../dashboard/stats\";\nimport { create as transaction_createImpl18 } from \"../../../../transaction/create\";\nimport { deleteTransaction as transaction_deleteTransactionImpl19 } from \"../../../../transaction/delete\";\nimport { list as transaction_listImpl20 } from \"../../../../transaction/list\";\nimport { update as transaction_updateImpl21 } from \"../../../../transaction/update\";\nimport { getUploadUrl as upload_getUploadUrlImpl22 } from \"../../../../upload/upload\";\nimport { processUpload as upload_processUploadImpl23 } from \"../../../../upload/upload\";\nimport * as budget_service from \"../../../../budget/encore.service\";\nimport * as transaction_service from \"../../../../transaction/encore.service\";\nimport * as ai_service from \"../../../../ai/encore.service\";\nimport * as auth_service from \"../../../../auth/encore.service\";\nimport * as frontend_service from \"../../../../frontend/encore.service\";\nimport * as dashboard_service from \"../../../../dashboard/encore.service\";\nimport * as category_service from \"../../../../category/encore.service\";\nimport * as upload_service from \"../../../../upload/encore.service\";\n\nconst gateways: any[] = [\n    api_gatewayGW,\n];\n\nconst handlers: Handler[] = [\n    {\n        apiRoute: {\n            service:           \"ai\",\n            name:              \"applySuggestion\",\n            handler:           ai_applySuggestionImpl0,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":true,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: ai_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"ai\",\n            name:              \"categorizeBatch\",\n            handler:           ai_categorizeBatchImpl1,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":true,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: ai_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"ai\",\n            name:              \"detectAnomalies\",\n            handler:           ai_detectAnomaliesImpl2,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":false,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: ai_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"ai\",\n            name:              \"detectAnomaliesCron\",\n            handler:           ai_detectAnomaliesCronImpl3,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":false,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: ai_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"ai\",\n            name:              \"getAnomalies\",\n            handler:           ai_getAnomaliesImpl4,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":true,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: ai_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"ai\",\n            name:              \"acknowledgeAnomaly\",\n            handler:           ai_acknowledgeAnomalyImpl5,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":true,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: ai_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"ai\",\n            name:              \"getSettings\",\n            handler:           ai_getSettingsImpl6,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":true,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: ai_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"ai\",\n            name:              \"updateSettings\",\n            handler:           ai_updateSettingsImpl7,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":true,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: ai_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"ai\",\n            name:              \"getInsights\",\n            handler:           ai_getInsightsImpl8,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":true,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: ai_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"auth\",\n            name:              \"clerkWebhook\",\n            handler:           auth_clerkWebhookImpl9,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: auth_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"auth\",\n            name:              \"getUserInfo\",\n            handler:           auth_getUserInfoImpl10,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":true,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: auth_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"budget\",\n            name:              \"create\",\n            handler:           budget_createImpl11,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":true,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: budget_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"budget\",\n            name:              \"list\",\n            handler:           budget_listImpl12,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":true,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: budget_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"category\",\n            name:              \"create\",\n            handler:           category_createImpl13,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":true,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: category_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"category\",\n            name:              \"list\",\n            handler:           category_listImpl14,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":true,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: category_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"category\",\n            name:              \"listRules\",\n            handler:           category_listRulesImpl15,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: category_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"category\",\n            name:              \"createRule\",\n            handler:           category_createRuleImpl16,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: category_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"dashboard\",\n            name:              \"getStats\",\n            handler:           dashboard_getStatsImpl17,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":true,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: dashboard_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"transaction\",\n            name:              \"create\",\n            handler:           transaction_createImpl18,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":true,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: transaction_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"transaction\",\n            name:              \"deleteTransaction\",\n            handler:           transaction_deleteTransactionImpl19,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: transaction_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"transaction\",\n            name:              \"list\",\n            handler:           transaction_listImpl20,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":true,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: transaction_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"transaction\",\n            name:              \"update\",\n            handler:           transaction_updateImpl21,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: transaction_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"upload\",\n            name:              \"getUploadUrl\",\n            handler:           upload_getUploadUrlImpl22,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: upload_service.default.cfg.middlewares || [],\n    },\n    {\n        apiRoute: {\n            service:           \"upload\",\n            name:              \"processUpload\",\n            handler:           upload_processUploadImpl23,\n            raw:               false,\n            streamingRequest:  false,\n            streamingResponse: false,\n        },\n        endpointOptions: {\"expose\":true,\"auth\":false,\"isRaw\":false,\"isStream\":false,\"tags\":[]},\n        middlewares: upload_service.default.cfg.middlewares || [],\n    },\n];\n\nregisterGateways(gateways);\nregisterHandlers(handlers);\n\nawait run(import.meta.url);\n", "import { createClerkClient, verifyToken } from \"@clerk/backend\";\nimport { Header, APIError, Gateway } from \"encore.dev/api\";\nimport { authHandler } from \"encore.dev/auth\";\nimport { secret } from \"encore.dev/config\";\n\nconst clerkSecretKey = secret(\"ClerkSecretKey\");\nconst clerkClient = createClerkClient({ secretKey: clerkSecretKey() });\n\ninterface AuthParams {\n  authorization?: Header<\"Authorization\">;\n}\n\nexport interface AuthData {\n  userID: string;\n  imageUrl: string;\n  email: string | null;\n  organizationID: string | null;\n}\n\nexport const auth = authHandler<AuthParams, AuthData>(\n  async (data) => {\n    const token = data.authorization?.replace(\"Bearer \", \"\");\n    if (!token) {\n      throw APIError.unauthenticated(\"missing token\");\n    }\n\n    try {\n      const verifiedToken = await verifyToken(token, {\n        secretKey: clerkSecretKey(),\n      });\n\n      const user = await clerkClient.users.getUser(verifiedToken.sub);\n      \n      const organizationMemberships = await clerkClient.users.getOrganizationMembershipList({\n        userId: user.id,\n      });\n\n      const primaryOrgId = organizationMemberships.data[0]?.organization?.id || null;\n\n      return {\n        userID: user.id,\n        imageUrl: user.imageUrl,\n        email: user.emailAddresses[0]?.emailAddress ?? null,\n        organizationID: primaryOrgId,\n      };\n    } catch (err) {\n      throw APIError.unauthenticated(\"invalid token\", err as Error);\n    }\n  }\n);\n\nexport const gw = new Gateway({ authHandler: auth });\n", "import { api } from \"encore.dev/api\";\nimport { getAuthData } from \"~encore/auth\";\nimport db from \"../external_dbs/postgres/db\";\n\ninterface ApplySuggestionParams {\n  transactionId: string;\n  createRule?: boolean;\n}\n\ninterface ApplySuggestionResponse {\n  success: boolean;\n  ruleCreated?: boolean;\n}\n\nexport const applySuggestion = api<ApplySuggestionParams, ApplySuggestionResponse>(\n  { auth: true, expose: true, method: \"POST\", path: \"/ai/apply-suggestion/:transactionId\" },\n  async ({ transactionId, createRule }) => {\n    const authData = getAuthData()!;\n    const orgId = authData.organizationID;\n    if (!orgId) throw new Error(\"Organization ID required\");\n\n    const txn = await db.queryRow<{\n      ai_category: string | null;\n      merchant: string | null;\n      description: string;\n    }>`\n      SELECT ai_category, merchant, description\n      FROM transactions\n      WHERE id = ${transactionId} AND organization_id = ${orgId}\n    `;\n\n    if (!txn || !txn.ai_category) {\n      throw new Error(\"Transaction not found or no AI suggestion available\");\n    }\n\n    await db.exec`\n      UPDATE transactions\n      SET \n        category = ${txn.ai_category},\n        is_manual_category = true\n      WHERE id = ${transactionId}\n    `;\n\n    let ruleCreated = false;\n    if (createRule && txn.merchant) {\n      const normalizedMerchant = txn.merchant.toLowerCase().trim();\n      \n      const existingRule = await db.queryRow<{ id: string }>`\n        SELECT id FROM categorization_rules\n        WHERE organization_id = ${orgId}\n          AND merchant_pattern = ${normalizedMerchant}\n      `;\n\n      if (!existingRule) {\n        await db.exec`\n          INSERT INTO categorization_rules (\n            organization_id, merchant_pattern, category, \n            confidence, rule_type, created_by\n          )\n          VALUES (\n            ${orgId}, ${normalizedMerchant}, ${txn.ai_category},\n            1.0, 'manual', ${authData.userID}\n          )\n        `;\n        ruleCreated = true;\n      }\n    }\n\n    return { success: true, ruleCreated };\n  }\n);\n", "import { SQLDatabase } from \"encore.dev/storage/sqldb\";\n\n// Connect to Supabase PostgreSQL\nexport default new SQLDatabase(\"postgres\", {\n  migrations: \"./migrations\",\n});\n", "import { api } from \"encore.dev/api\";\nimport { getAuthData } from \"~encore/auth\";\nimport db from \"../external_dbs/postgres/db\";\n\ninterface CategorizeBatchParams {\n  fileId: string;\n}\n\ninterface CategorizeBatchResponse {\n  totalProcessed: number;\n  categorized: number;\n  skipped: number;\n}\n\nexport const categorizeBatch = api<CategorizeBatchParams, CategorizeBatchResponse>(\n  { auth: true, expose: true, method: \"POST\", path: \"/ai/categorize-batch\" },\n  async ({ fileId }) => {\n    const authData = getAuthData()!;\n    const orgId = authData.organizationID;\n    if (!orgId) throw new Error(\"Organization ID required\");\n\n    const transactions = await db.queryAll<{\n      id: string;\n      merchant: string | null;\n      description: string;\n      amount: number;\n      category: string | null;\n      is_manual_category: boolean;\n    }>`\n      SELECT id, merchant, description, amount, category, \n             COALESCE(is_manual_category, false) as is_manual_category\n      FROM transactions\n      WHERE organization_id = ${orgId}\n        AND batch_id = ${fileId}\n        AND is_manual_category = false\n      ORDER BY date DESC\n    `;\n\n    let categorized = 0;\n    let skipped = 0;\n\n    for (const txn of transactions) {\n      if (txn.is_manual_category) {\n        skipped++;\n        continue;\n      }\n\n      const result = await categorizeSingleTransaction(\n        orgId,\n        txn.merchant || txn.description,\n        txn.amount,\n        txn.description\n      );\n\n      if (result) {\n        await db.exec`\n          UPDATE transactions\n          SET \n            ai_category = ${result.category},\n            ai_confidence = ${result.confidence},\n            ai_explanation = ${result.explanation},\n            model_version = ${result.modelVersion},\n            category = COALESCE(category, ${result.category})\n          WHERE id = ${txn.id}\n        `;\n        categorized++;\n      } else {\n        skipped++;\n      }\n    }\n\n    return {\n      totalProcessed: transactions.length,\n      categorized,\n      skipped,\n    };\n  }\n);\n\nasync function categorizeSingleTransaction(\n  orgId: string,\n  merchant: string,\n  amount: number,\n  description: string\n): Promise<{\n  category: string;\n  confidence: number;\n  explanation: string;\n  modelVersion: string;\n} | null> {\n  const normalizedMerchant = merchant.toLowerCase().trim();\n\n  const existingRule = await db.queryRow<{\n    category: string;\n    confidence: number;\n  }>`\n    SELECT category, confidence\n    FROM categorization_rules\n    WHERE organization_id = ${orgId}\n      AND ${normalizedMerchant} ILIKE '%' || merchant_pattern || '%'\n    ORDER BY priority DESC, confidence DESC\n    LIMIT 1\n  `;\n\n  if (existingRule) {\n    await db.exec`\n      UPDATE categorization_rules\n      SET usage_count = usage_count + 1\n      WHERE organization_id = ${orgId}\n        AND category = ${existingRule.category}\n    `;\n\n    return {\n      category: existingRule.category,\n      confidence: existingRule.confidence,\n      explanation: `Matched rule for merchant pattern`,\n      modelVersion: \"rule-based-v1\",\n    };\n  }\n\n  const similarMerchant = await db.queryRow<{\n    category: string;\n  }>`\n    SELECT category\n    FROM merchants\n    WHERE organization_id = ${orgId}\n      AND category IS NOT NULL\n      AND normalized_name = ${normalizedMerchant}\n    LIMIT 1\n  `;\n\n  if (similarMerchant) {\n    return {\n      category: similarMerchant.category,\n      confidence: 0.85,\n      explanation: `Based on similar merchant: ${merchant}`,\n      modelVersion: \"merchant-match-v1\",\n    };\n  }\n\n  const categoryGuess = guessCategoryFromMerchant(normalizedMerchant, amount);\n  if (categoryGuess) {\n    return {\n      category: categoryGuess.category,\n      confidence: categoryGuess.confidence,\n      explanation: categoryGuess.explanation,\n      modelVersion: \"heuristic-v1\",\n    };\n  }\n\n  return null;\n}\n\nfunction guessCategoryFromMerchant(\n  merchant: string,\n  amount: number\n): { category: string; confidence: number; explanation: string } | null {\n  const patterns = [\n    { keywords: [\"zomato\", \"swiggy\", \"uber eats\", \"food\", \"restaurant\", \"cafe\"], category: \"Food & Dining\", confidence: 0.9 },\n    { keywords: [\"amazon\", \"flipkart\", \"myntra\", \"shopping\", \"store\"], category: \"Shopping\", confidence: 0.85 },\n    { keywords: [\"uber\", \"ola\", \"taxi\", \"transport\", \"metro\", \"bus\"], category: \"Transportation\", confidence: 0.9 },\n    { keywords: [\"netflix\", \"spotify\", \"prime\", \"subscription\"], category: \"Entertainment\", confidence: 0.95 },\n    { keywords: [\"electricity\", \"water\", \"gas\", \"utility\", \"bill\"], category: \"Utilities\", confidence: 0.9 },\n    { keywords: [\"rent\", \"lease\", \"housing\"], category: \"Housing\", confidence: 0.95 },\n    { keywords: [\"hospital\", \"clinic\", \"pharmacy\", \"medical\", \"health\"], category: \"Healthcare\", confidence: 0.9 },\n    { keywords: [\"gym\", \"fitness\", \"yoga\"], category: \"Fitness\", confidence: 0.9 },\n  ];\n\n  for (const pattern of patterns) {\n    if (pattern.keywords.some(kw => merchant.includes(kw))) {\n      return {\n        category: pattern.category,\n        confidence: pattern.confidence,\n        explanation: `Merchant name contains keywords related to ${pattern.category}`,\n      };\n    }\n  }\n\n  return null;\n}\n", "import { api } from \"encore.dev/api\";\nimport { CronJob } from \"encore.dev/cron\";\nimport db from \"../external_dbs/postgres/db\";\n\ninterface DetectAnomaliesResponse {\n  detected: number;\n  organizations: number;\n}\n\nasync function detectAnomaliesForOrg(orgId: string): Promise<number> {\n  const last30Days = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString();\n  \n  const dailySpending = await db.queryAll<{\n    date: string;\n    total: number;\n  }>`\n    SELECT \n      DATE(date) as date,\n      SUM(amount) as total\n    FROM transactions\n    WHERE organization_id = ${orgId}\n      AND date >= ${last30Days}\n      AND amount > 0\n    GROUP BY DATE(date)\n    ORDER BY date\n  `;\n\n  if (dailySpending.length < 7) {\n    return 0;\n  }\n\n  const amounts = dailySpending.map(d => d.total);\n  const mean = amounts.reduce((a, b) => a + b, 0) / amounts.length;\n  const stdDev = Math.sqrt(\n    amounts.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b, 0) / amounts.length\n  );\n\n  const sortedAmounts = [...amounts].sort((a, b) => a - b);\n  const median = sortedAmounts[Math.floor(sortedAmounts.length / 2)];\n  const deviations = amounts.map(x => Math.abs(x - median));\n  const mad = deviations.sort((a, b) => a - b)[Math.floor(deviations.length / 2)] * 1.4826;\n\n  let anomaliesDetected = 0;\n\n  for (const day of dailySpending) {\n    const zScore = stdDev > 0 ? Math.abs((day.total - mean) / stdDev) : 0;\n    const madScore = mad > 0 ? Math.abs((day.total - median) / mad) : 0;\n\n    let severity: string | null = null;\n    let type = \"high_spending\";\n\n    if (zScore > 3 || madScore > 3.5) {\n      severity = \"high\";\n    } else if (zScore > 2.5 || madScore > 3) {\n      severity = \"medium\";\n    } else if (zScore > 2 || madScore > 2.5) {\n      severity = \"low\";\n    }\n\n    if (severity) {\n      const existing = await db.queryRow<{ id: string }>`\n        SELECT id FROM anomalies\n        WHERE organization_id = ${orgId}\n          AND date = ${day.date}\n      `;\n\n      if (!existing) {\n        await db.exec`\n          INSERT INTO anomalies (\n            organization_id, date, amount, z_score, mad_score, type, severity\n          )\n          VALUES (\n            ${orgId}, ${day.date}, ${day.total}, ${zScore}, ${madScore}, ${type}, ${severity}\n          )\n        `;\n        anomaliesDetected++;\n      }\n    }\n  }\n\n  return anomaliesDetected;\n}\n\nexport const detectAnomalies = api<{}, DetectAnomaliesResponse>(\n  { auth: false, expose: false, method: \"POST\", path: \"/ai/detect-anomalies\" },\n  async () => {\n    const orgs = await db.queryAll<{ id: string }>`\n      SELECT DISTINCT organization_id as id\n      FROM transactions\n      WHERE date >= NOW() - INTERVAL '30 days'\n    `;\n\n    let totalDetected = 0;\n\n    for (const org of orgs) {\n      const detected = await detectAnomaliesForOrg(org.id);\n      totalDetected += detected;\n    }\n\n    return {\n      detected: totalDetected,\n      organizations: orgs.length,\n    };\n  }\n);\n\nexport const detectAnomaliesCron = api(\n  { auth: false, expose: false, method: \"POST\", path: \"/ai/detect-anomalies-cron\" },\n  async () => {\n    return await detectAnomalies({});\n  }\n);\n\nconst _ = new CronJob(\"anomaly-detection\", {\n  title: \"Detect spending anomalies\",\n  schedule: \"0 2 * * *\",\n  endpoint: detectAnomaliesCron,\n});\n\ninterface GetAnomaliesResponse {\n  anomalies: Array<{\n    id: string;\n    date: string;\n    amount: number;\n    zScore: number;\n    madScore: number;\n    type: string;\n    severity: string;\n    acknowledged: boolean;\n  }>;\n}\n\nexport const getAnomalies = api<{}, GetAnomaliesResponse>(\n  { auth: true, expose: true, method: \"GET\", path: \"/ai/anomalies\" },\n  async () => {\n    const { getAuthData } = await import(\"~encore/auth\");\n    const authData = getAuthData()!;\n    const orgId = authData.organizationID;\n    if (!orgId) throw new Error(\"Organization ID required\");\n\n    const anomalies = await db.queryAll<{\n      id: string;\n      date: string;\n      amount: number;\n      z_score: number;\n      mad_score: number;\n      type: string;\n      severity: string;\n      acknowledged: boolean;\n    }>`\n      SELECT \n        id, date, amount, \n        z_score, mad_score,\n        type, severity, acknowledged\n      FROM anomalies\n      WHERE organization_id = ${orgId}\n      ORDER BY date DESC\n      LIMIT 30\n    `;\n\n    return {\n      anomalies: anomalies.map(a => ({\n        id: a.id,\n        date: a.date,\n        amount: a.amount,\n        zScore: a.z_score,\n        madScore: a.mad_score,\n        type: a.type,\n        severity: a.severity,\n        acknowledged: a.acknowledged,\n      })),\n    };\n  }\n);\n\ninterface AcknowledgeAnomalyParams {\n  anomalyId: string;\n}\n\nexport const acknowledgeAnomaly = api<AcknowledgeAnomalyParams, { success: boolean }>(\n  { auth: true, expose: true, method: \"POST\", path: \"/ai/anomalies/:anomalyId/acknowledge\" },\n  async ({ anomalyId }) => {\n    const { getAuthData } = await import(\"~encore/auth\");\n    const authData = getAuthData()!;\n    const orgId = authData.organizationID;\n    if (!orgId) throw new Error(\"Organization ID required\");\n\n    await db.exec`\n      UPDATE anomalies\n      SET acknowledged = true\n      WHERE id = ${anomalyId} AND organization_id = ${orgId}\n    `;\n\n    return { success: true };\n  }\n);\n", "import { api } from \"encore.dev/api\";\nimport { getAuthData } from \"~encore/auth\";\nimport db from \"../external_dbs/postgres/db\";\n\ninterface UserSettings {\n  aiInsightsEnabled: boolean;\n  aiCategorizationEnabled: boolean;\n  shareMerchantNames: boolean;\n  privacyMode: boolean;\n}\n\nexport const getSettings = api<{}, UserSettings>(\n  { auth: true, expose: true, method: \"GET\", path: \"/ai/settings\" },\n  async () => {\n    const authData = getAuthData()!;\n    const orgId = authData.organizationID;\n    if (!orgId) throw new Error(\"Organization ID required\");\n\n    const settings = await db.queryRow<UserSettings>`\n      SELECT \n        ai_insights_enabled as \"aiInsightsEnabled\",\n        ai_categorization_enabled as \"aiCategorizationEnabled\",\n        share_merchant_names as \"shareMerchantNames\",\n        privacy_mode as \"privacyMode\"\n      FROM user_settings\n      WHERE user_id = ${authData.userID}\n    `;\n\n    if (!settings) {\n      await db.exec`\n        INSERT INTO user_settings (user_id, organization_id)\n        VALUES (${authData.userID}, ${orgId})\n      `;\n\n      return {\n        aiInsightsEnabled: true,\n        aiCategorizationEnabled: true,\n        shareMerchantNames: true,\n        privacyMode: false,\n      };\n    }\n\n    return settings;\n  }\n);\n\ninterface UpdateSettingsParams {\n  aiInsightsEnabled?: boolean;\n  aiCategorizationEnabled?: boolean;\n  shareMerchantNames?: boolean;\n  privacyMode?: boolean;\n}\n\nexport const updateSettings = api<UpdateSettingsParams, UserSettings>(\n  { auth: true, expose: true, method: \"PUT\", path: \"/ai/settings\" },\n  async (params) => {\n    const authData = getAuthData()!;\n    const orgId = authData.organizationID;\n    if (!orgId) throw new Error(\"Organization ID required\");\n\n    const updates: string[] = [];\n    const values: any[] = [];\n\n    if (params.aiInsightsEnabled !== undefined) {\n      updates.push(\"ai_insights_enabled = $\" + (values.length + 1));\n      values.push(params.aiInsightsEnabled);\n    }\n    if (params.aiCategorizationEnabled !== undefined) {\n      updates.push(\"ai_categorization_enabled = $\" + (values.length + 1));\n      values.push(params.aiCategorizationEnabled);\n    }\n    if (params.shareMerchantNames !== undefined) {\n      updates.push(\"share_merchant_names = $\" + (values.length + 1));\n      values.push(params.shareMerchantNames);\n    }\n    if (params.privacyMode !== undefined) {\n      updates.push(\"privacy_mode = $\" + (values.length + 1));\n      values.push(params.privacyMode);\n    }\n\n    if (updates.length > 0) {\n      const query = `\n        UPDATE user_settings\n        SET ${updates.join(\", \")}, updated_at = NOW()\n        WHERE user_id = $${values.length + 1}\n      `;\n      await db.rawExec(query, ...values, authData.userID);\n    }\n\n    return await getSettings({});\n  }\n);\n", "import { api } from \"encore.dev/api\";\nimport { Query } from \"encore.dev/api\";\nimport { getAuthData } from \"~encore/auth\";\nimport db from \"../external_dbs/postgres/db\";\n\ninterface InsightsParams {\n  periodStart?: Query<string>;\n  periodEnd?: Query<string>;\n}\n\ninterface Bullet {\n  text: string;\n  type: \"info\" | \"warning\" | \"success\";\n  link?: string;\n}\n\ninterface InsightsResponse {\n  bullets: Bullet[];\n  summary: string;\n  periodStart: string;\n  periodEnd: string;\n}\n\nexport const getInsights = api<InsightsParams, InsightsResponse>(\n  { auth: true, expose: true, method: \"GET\", path: \"/ai/insights\" },\n  async ({ periodStart, periodEnd }) => {\n    const authData = getAuthData()!;\n    const orgId = authData.organizationID;\n    if (!orgId) throw new Error(\"Organization ID required\");\n\n    const settings = await db.queryRow<{ ai_insights_enabled: boolean }>`\n      SELECT ai_insights_enabled\n      FROM user_settings\n      WHERE user_id = ${authData.userID}\n    `;\n\n    if (settings && !settings.ai_insights_enabled) {\n      return {\n        bullets: [],\n        summary: \"AI insights are disabled. Enable them in Settings to see personalized insights.\",\n        periodStart: periodStart || \"\",\n        periodEnd: periodEnd || \"\",\n      };\n    }\n\n    const start = periodStart || new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString();\n    const end = periodEnd || new Date().toISOString();\n\n    const cached = await db.queryRow<{\n      bullets: any;\n      summary: string;\n    }>`\n      SELECT bullets, summary\n      FROM insights\n      WHERE organization_id = ${orgId}\n        AND period_start = ${start}\n        AND period_end = ${end}\n      ORDER BY created_at DESC\n      LIMIT 1\n    `;\n\n    if (cached) {\n      return {\n        bullets: cached.bullets,\n        summary: cached.summary,\n        periodStart: start,\n        periodEnd: end,\n      };\n    }\n\n    const insights = await generateInsights(orgId, start, end);\n\n    await db.exec`\n      INSERT INTO insights (organization_id, period_start, period_end, bullets, summary)\n      VALUES (${orgId}, ${start}, ${end}, ${JSON.stringify(insights.bullets)}, ${insights.summary})\n    `;\n\n    return {\n      ...insights,\n      periodStart: start,\n      periodEnd: end,\n    };\n  }\n);\n\nasync function generateInsights(\n  orgId: string,\n  start: string,\n  end: string\n): Promise<{ bullets: Bullet[]; summary: string }> {\n  const currentPeriodStats = await db.queryRow<{\n    total: number;\n    count: number;\n    avg_daily: number;\n  }>`\n    SELECT \n      COALESCE(SUM(amount), 0) as total,\n      COUNT(*) as count,\n      COALESCE(SUM(amount), 0) / GREATEST(EXTRACT(DAY FROM (${end}::timestamp - ${start}::timestamp)), 1) as avg_daily\n    FROM transactions\n    WHERE organization_id = ${orgId}\n      AND date >= ${start}\n      AND date <= ${end}\n      AND amount > 0\n  `;\n\n  const prevStart = new Date(new Date(start).getTime() - 30 * 24 * 60 * 60 * 1000).toISOString();\n  const prevEnd = start;\n\n  const prevPeriodStats = await db.queryRow<{\n    total: number;\n  }>`\n    SELECT COALESCE(SUM(amount), 0) as total\n    FROM transactions\n    WHERE organization_id = ${orgId}\n      AND date >= ${prevStart}\n      AND date < ${prevEnd}\n      AND amount > 0\n  `;\n\n  const topCategories = await db.queryAll<{\n    category: string;\n    total: number;\n  }>`\n    SELECT \n      COALESCE(category, 'Uncategorized') as category,\n      SUM(amount) as total\n    FROM transactions\n    WHERE organization_id = ${orgId}\n      AND date >= ${start}\n      AND date <= ${end}\n      AND amount > 0\n    GROUP BY category\n    ORDER BY total DESC\n    LIMIT 3\n  `;\n\n  const anomalies = await db.queryAll<{\n    date: string;\n    amount: number;\n    severity: string;\n  }>`\n    SELECT date, amount, severity\n    FROM anomalies\n    WHERE organization_id = ${orgId}\n      AND date >= ${start}\n      AND date <= ${end}\n      AND acknowledged = false\n    ORDER BY date DESC\n    LIMIT 3\n  `;\n\n  const bullets: Bullet[] = [];\n\n  const momChange = prevPeriodStats && prevPeriodStats.total > 0\n    ? ((currentPeriodStats!.total - prevPeriodStats.total) / prevPeriodStats.total) * 100\n    : 0;\n\n  if (Math.abs(momChange) > 10) {\n    bullets.push({\n      text: `Spending ${momChange > 0 ? 'increased' : 'decreased'} by ${Math.abs(momChange).toFixed(1)}% vs last period`,\n      type: momChange > 20 ? \"warning\" : momChange < -10 ? \"success\" : \"info\",\n    });\n  }\n\n  if (topCategories.length > 0) {\n    bullets.push({\n      text: `Top spending: ${topCategories[0].category} (₹${topCategories[0].total.toFixed(0)})`,\n      type: \"info\",\n      link: `/transactions?category=${topCategories[0].category}`,\n    });\n  }\n\n  if (anomalies.length > 0) {\n    bullets.push({\n      text: `${anomalies.length} unusual spending ${anomalies.length === 1 ? 'day' : 'days'} detected`,\n      type: \"warning\",\n    });\n  }\n\n  if (currentPeriodStats!.avg_daily > 0) {\n    bullets.push({\n      text: `Average daily spend: ₹${currentPeriodStats!.avg_daily.toFixed(0)}`,\n      type: \"info\",\n    });\n  }\n\n  const summary = `This period you spent ₹${currentPeriodStats!.total.toFixed(0)} across ${currentPeriodStats!.count} transactions. ${\n    momChange > 10\n      ? `Spending increased by ${momChange.toFixed(1)}% compared to last month, primarily driven by ${topCategories[0]?.category || 'various categories'}.`\n      : momChange < -10\n      ? `Great job! Spending decreased by ${Math.abs(momChange).toFixed(1)}% compared to last month.`\n      : 'Spending remained relatively stable compared to last month.'\n  }${anomalies.length > 0 ? ` We detected ${anomalies.length} unusual spending patterns that may need your attention.` : ''}`;\n\n  return { bullets, summary };\n}\n", "import { api } from \"encore.dev/api\";\nimport { secret } from \"encore.dev/config\";\nimport { Header } from \"encore.dev/api\";\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst supabaseUrl = secret(\"SupabaseURL\");\nconst supabaseServiceKey = secret(\"SupabaseServiceKey\");\n\ninterface ClerkWebhookEvent {\n  type: string;\n  data: {\n    id: string;\n    email_addresses: Array<{ email_address: string; id: string }>;\n    image_url?: string;\n    first_name?: string;\n    last_name?: string;\n  };\n}\n\nexport const clerkWebhook = api(\n  { auth: false, expose: true, method: \"POST\", path: \"/webhooks/clerk\", bodyLimit: 5 * 1024 * 1024 },\n  async (event: ClerkWebhookEvent): Promise<{ success: boolean }> => {\n    const supabase = createClient(supabaseUrl(), supabaseServiceKey(), {\n      auth: {\n        autoRefreshToken: false,\n        persistSession: false,\n      },\n    });\n\n    if (event.type === \"user.created\" || event.type === \"user.updated\") {\n      const clerkUserId = event.data.id;\n      const email = event.data.email_addresses[0]?.email_address;\n      const name = event.data.first_name && event.data.last_name\n        ? `${event.data.first_name} ${event.data.last_name}`\n        : event.data.first_name || event.data.last_name || null;\n      const imageUrl = event.data.image_url;\n\n      if (!email) {\n        console.error(\"No email found for user\", clerkUserId);\n        return { success: false };\n      }\n\n      const { data: existingUser } = await supabase.auth.admin.getUserById(clerkUserId);\n\n      if (existingUser.user) {\n        await supabase.auth.admin.updateUserById(clerkUserId, {\n          email,\n          user_metadata: {\n            name,\n            image: imageUrl,\n          },\n        });\n      } else {\n        const { error } = await supabase.auth.admin.createUser({\n          id: clerkUserId,\n          email,\n          email_confirm: true,\n          user_metadata: {\n            name,\n            image: imageUrl,\n          },\n        });\n\n        if (error) {\n          console.error(\"Error creating user in Supabase:\", error);\n          return { success: false };\n        }\n      }\n\n      return { success: true };\n    }\n\n    if (event.type === \"user.deleted\") {\n      const clerkUserId = event.data.id;\n      \n      const { error } = await supabase.auth.admin.deleteUser(clerkUserId);\n\n      if (error) {\n        console.error(\"Error deleting user from Supabase:\", error);\n        return { success: false };\n      }\n\n      return { success: true };\n    }\n\n    return { success: true };\n  }\n);\n", "import { api } from \"encore.dev/api\";\nimport { getAuthData } from \"~encore/auth\";\n\nexport interface UserInfo {\n  id: string;\n  email: string | null;\n  imageUrl: string;\n  organizationID: string | null;\n}\n\nexport const getUserInfo = api<{}, UserInfo>(\n  { auth: true, expose: true, method: \"GET\", path: \"/user/me\" },\n  async () => {\n    const authData = getAuthData()!;\n    return {\n      id: authData.userID,\n      email: authData.email,\n      imageUrl: authData.imageUrl,\n      organizationID: authData.organizationID,\n    };\n  }\n);\n", "import { api } from \"encore.dev/api\";\nimport { getAuthData } from \"~encore/auth\";\nimport db from \"../db\";\n\ninterface CreateParams {\n  categoryId: number;\n  amount: number;\n  periodStart: Date;\n  periodEnd: Date;\n  alertThreshold?: number;\n}\n\ninterface Budget {\n  id: number;\n  categoryId: number;\n  amount: number;\n  periodStart: Date;\n  periodEnd: Date;\n  alertThreshold: number;\n}\n\n// Creates a new budget\nexport const create = api<CreateParams, Budget>(\n  { auth: true, expose: true, method: \"POST\", path: \"/budgets\" },\n  async (params) => {\n    const authData = getAuthData()!;\n    const orgId = authData.organizationID;\n    if (!orgId) throw new Error(\"Organization ID required\");\n    const result = await db.queryRow<Budget>`\n      INSERT INTO budgets (category_id, amount, period_start, period_end, alert_threshold)\n      VALUES (\n        ${params.categoryId},\n        ${params.amount},\n        ${params.periodStart},\n        ${params.periodEnd},\n        ${params.alertThreshold || 0.8}\n      )\n      RETURNING\n        id, category_id as \"categoryId\", amount,\n        period_start as \"periodStart\", period_end as \"periodEnd\",\n        alert_threshold as \"alertThreshold\"\n    `;\n\n    return result!;\n  }\n);\n", "// This is a stub file that will be used by Encore\n// The actual database connection is managed in lib/db.ts\nimport { SQLDatabase } from \"encore.dev/storage/sqldb\";\n\nexport default new SQLDatabase(\"db\", {\n  migrations: \"./migrations\",\n  // This is a stub - the actual connection is managed in lib/db.ts\n});\n", "import { api } from \"encore.dev/api\";\nimport { getAuthData } from \"~encore/auth\";\nimport db from \"../db\";\n\ninterface Budget {\n  id: number;\n  categoryId: number;\n  categoryName: string;\n  categoryColor: string;\n  amount: number;\n  periodStart: Date;\n  periodEnd: Date;\n  alertThreshold: number;\n  spent: number;\n  percentage: number;\n}\n\ninterface ListResponse {\n  budgets: Budget[];\n}\n\n// Lists all budgets with current spending\nexport const list = api<{}, ListResponse>(\n  { auth: true, expose: true, method: \"GET\", path: \"/budgets\" },\n  async () => {\n    const authData = getAuthData()!;\n    const orgId = authData.organizationID;\n    if (!orgId) throw new Error(\"Organization ID required\");\n    const budgets = await db.queryAll<Budget>`\n      SELECT \n        b.id, b.category_id as \"categoryId\",\n        c.name as \"categoryName\", c.color as \"categoryColor\",\n        b.amount, b.period_start as \"periodStart\",\n        b.period_end as \"periodEnd\", b.alert_threshold as \"alertThreshold\",\n        COALESCE(SUM(t.amount), 0) as spent,\n        CASE \n          WHEN b.amount > 0 THEN (COALESCE(SUM(t.amount), 0) / b.amount) * 100\n          ELSE 0\n        END as percentage\n      FROM budgets b\n      JOIN categories c ON b.category_id = c.id\n      LEFT JOIN transactions t ON t.category_id = b.category_id\n        AND t.date >= b.period_start AND t.date <= b.period_end\n      WHERE b.period_end >= NOW()\n      GROUP BY b.id, c.name, c.color\n      ORDER BY b.period_start DESC\n    `;\n\n    return { budgets };\n  }\n);\n", "import { api } from \"encore.dev/api\";\nimport { getAuthData } from \"~encore/auth\";\nimport db from \"../db\";\n\ninterface CreateParams {\n  name: string;\n  color?: string;\n  icon?: string;\n  parentId?: number;\n}\n\ninterface Category {\n  id: number;\n  name: string;\n  color: string;\n  icon: string | null;\n  parentId: number | null;\n  isSystem: boolean;\n}\n\n// Creates a new category\nexport const create = api<CreateParams, Category>(\n  { auth: true, expose: true, method: \"POST\", path: \"/categories\" },\n  async (params) => {\n    const authData = getAuthData()!;\n    const orgId = authData.organizationID;\n    if (!orgId) throw new Error(\"Organization ID required\");\n    const result = await db.queryRow<Category>`\n      INSERT INTO categories (name, color, icon, parent_id, is_system)\n      VALUES (\n        ${params.name},\n        ${params.color || '#6EE7F9'},\n        ${params.icon || null},\n        ${params.parentId || null},\n        false\n      )\n      RETURNING\n        id, name, color, icon,\n        parent_id as \"parentId\",\n        is_system as \"isSystem\"\n    `;\n\n    return result!;\n  }\n);\n", "import { api } from \"encore.dev/api\";\nimport { getAuthData } from \"~encore/auth\";\nimport db from \"../db\";\n\ninterface Category {\n  id: number;\n  name: string;\n  color: string;\n  icon: string | null;\n  parentId: number | null;\n  isSystem: boolean;\n}\n\ninterface ListResponse {\n  categories: Category[];\n}\n\n// Lists all categories\nexport const list = api<{}, ListResponse>(\n  { auth: true, expose: true, method: \"GET\", path: \"/categories\" },\n  async () => {\n    const authData = getAuthData()!;\n    const orgId = authData.organizationID;\n    if (!orgId) throw new Error(\"Organization ID required\");\n    const categories = await db.queryAll<Category>`\n      SELECT \n        id, name, color, icon,\n        parent_id as \"parentId\",\n        is_system as \"isSystem\"\n      FROM categories\n      ORDER BY name\n    `;\n\n    return { categories };\n  }\n);\n", "import { api } from \"encore.dev/api\";\nimport db from \"../db\";\n\ninterface Rule {\n  id: number;\n  pattern: string;\n  categoryId: number;\n  categoryName: string;\n  priority: number;\n  confidence: number;\n}\n\ninterface ListRulesResponse {\n  rules: Rule[];\n}\n\n// Lists all categorization rules\nexport const listRules = api<void, ListRulesResponse>(\n  { expose: true, method: \"GET\", path: \"/categories/rules\" },\n  async () => {\n    const rules = await db.queryAll<Rule>`\n      SELECT \n        r.id, r.pattern, r.category_id as \"categoryId\",\n        c.name as \"categoryName\", r.priority, r.confidence\n      FROM category_rules r\n      JOIN categories c ON r.category_id = c.id\n      ORDER BY r.priority DESC, r.id\n    `;\n\n    return { rules };\n  }\n);\n\ninterface CreateRuleParams {\n  pattern: string;\n  categoryId: number;\n  priority?: number;\n  confidence?: number;\n}\n\n// Creates a new categorization rule\nexport const createRule = api<CreateRuleParams, Rule>(\n  { expose: true, method: \"POST\", path: \"/categories/rules\" },\n  async (params) => {\n    const result = await db.queryRow<Rule>`\n      INSERT INTO category_rules (pattern, category_id, priority, confidence)\n      VALUES (\n        ${params.pattern},\n        ${params.categoryId},\n        ${params.priority || 0},\n        ${params.confidence || 1.0}\n      )\n      RETURNING\n        id, pattern, category_id as \"categoryId\",\n        (SELECT name FROM categories WHERE id = category_id) as \"categoryName\",\n        priority, confidence\n    `;\n\n    return result!;\n  }\n);\n", "import { api } from \"encore.dev/api\";\nimport { getAuthData } from \"~encore/auth\";\nimport { Query } from \"encore.dev/api\";\nimport db from \"../db\";\n\ninterface StatsParams {\n  startDate?: Query<string>;\n  endDate?: Query<string>;\n}\n\ninterface CategorySpend {\n  categoryId: number;\n  categoryName: string;\n  categoryColor: string;\n  total: number;\n}\n\ninterface DailySpend {\n  date: string;\n  total: number;\n}\n\ninterface TopMerchant {\n  merchant: string;\n  total: number;\n  count: number;\n}\n\ninterface StatsResponse {\n  totalSpend: number;\n  transactionCount: number;\n  avgPerDay: number;\n  topCategory: CategorySpend | null;\n  categoryBreakdown: CategorySpend[];\n  dailySpend: DailySpend[];\n  topMerchants: TopMerchant[];\n}\n\n// Returns dashboard statistics\nexport const getStats = api<StatsParams, StatsResponse>(\n  { auth: true, expose: true, method: \"GET\", path: \"/dashboard/stats\" },\n  async ({ startDate, endDate }) => {\n    const authData = getAuthData()!;\n    const orgId = authData.organizationID;\n    if (!orgId) throw new Error(\"Organization ID required\");\n    const startStr = startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString();\n    const endStr = endDate || new Date().toISOString();\n\n    const totals = await db.queryRow<{ total: number; count: number }>`\n      SELECT \n        COALESCE(SUM(amount), 0) as total,\n        COUNT(*) as count\n      FROM transactions\n      WHERE date >= ${startStr} AND date <= ${endStr} AND amount > 0\n    `;\n\n    const categoryBreakdown = await db.queryAll<CategorySpend>`\n      SELECT \n        c.id as \"categoryId\",\n        c.name as \"categoryName\",\n        c.color as \"categoryColor\",\n        COALESCE(SUM(t.amount), 0) as total\n      FROM categories c\n      LEFT JOIN transactions t ON t.category_id = c.id \n        AND t.date >= ${startStr} AND t.date <= ${endStr} AND t.amount > 0\n      GROUP BY c.id, c.name, c.color\n      HAVING COALESCE(SUM(t.amount), 0) > 0\n      ORDER BY total DESC\n    `;\n\n    const dailySpend = await db.queryAll<DailySpend>`\n      SELECT \n        DATE(date) as date,\n        SUM(amount) as total\n      FROM transactions\n      WHERE date >= ${startStr} AND date <= ${endStr} AND amount > 0\n      GROUP BY DATE(date)\n      ORDER BY date\n    `;\n\n    const topMerchants = await db.queryAll<TopMerchant>`\n      SELECT \n        merchant,\n        SUM(amount) as total,\n        COUNT(*) as count\n      FROM transactions\n      WHERE date >= ${startStr} AND date <= ${endStr} AND amount > 0\n      GROUP BY merchant\n      ORDER BY total DESC\n      LIMIT 10\n    `;\n\n    const days = Math.ceil((new Date(endStr).getTime() - new Date(startStr).getTime()) / (1000 * 60 * 60 * 24)) || 1;\n\n    return {\n      totalSpend: totals?.total || 0,\n      transactionCount: totals?.count || 0,\n      avgPerDay: (totals?.total || 0) / days,\n      topCategory: categoryBreakdown[0] || null,\n      categoryBreakdown,\n      dailySpend,\n      topMerchants,\n    };\n  }\n);\n", "import { api } from \"encore.dev/api\";\nimport { getAuthData } from \"~encore/auth\";\nimport db from \"../db\";\n\ninterface CreateParams {\n  date: Date;\n  amount: number;\n  merchant: string;\n  description?: string;\n  categoryId?: number;\n  currency?: string;\n  paymentMethod?: string;\n  tags?: string[];\n  notes?: string;\n  isRecurring?: boolean;\n}\n\ninterface Transaction {\n  id: number;\n  date: Date;\n  amount: number;\n  merchant: string;\n  description: string | null;\n  categoryId: number | null;\n  currency: string;\n  paymentMethod: string | null;\n  tags: string[];\n  notes: string | null;\n  isRecurring: boolean;\n}\n\n// Creates a new transaction\nexport const create = api<CreateParams, Transaction>(\n  { auth: true, expose: true, method: \"POST\", path: \"/transactions\" },\n  async (params) => {\n    const authData = getAuthData()!;\n    const orgId = authData.organizationID;\n    if (!orgId) throw new Error(\"Organization ID required\");\n    const result = await db.queryRow<Transaction>`\n      INSERT INTO transactions (\n        date, amount, merchant, description, category_id, currency,\n        payment_method, tags, notes, is_recurring\n      )\n      VALUES (\n        ${params.date}, ${params.amount}, ${params.merchant},\n        ${params.description || null}, ${params.categoryId || null},\n        ${params.currency || 'INR'}, ${params.paymentMethod || null},\n        ${params.tags || []}, ${params.notes || null},\n        ${params.isRecurring || false}\n      )\n      RETURNING\n        id, date, amount, merchant, description,\n        category_id as \"categoryId\", currency,\n        payment_method as \"paymentMethod\", tags, notes,\n        is_recurring as \"isRecurring\"\n    `;\n\n    return result!;\n  }\n);\n", "import { api } from \"encore.dev/api\";\nimport db from \"../db\";\n\n// Deletes a transaction\nexport const deleteTransaction = api<{ id: number }, void>(\n  { expose: true, method: \"DELETE\", path: \"/transactions/:id\" },\n  async ({ id }) => {\n    await db.exec`DELETE FROM transactions WHERE id = ${id}`;\n  }\n);\n", "import { api } from \"encore.dev/api\";\nimport { getAuthData } from \"~encore/auth\";\nimport { Query } from \"encore.dev/api\";\nimport db from \"../db\";\n\ninterface Transaction {\n  id: number;\n  date: Date;\n  amount: number;\n  merchant: string;\n  description: string | null;\n  categoryId: number | null;\n  categoryName: string | null;\n  categoryColor: string | null;\n  currency: string;\n  paymentMethod: string | null;\n  tags: string[];\n  notes: string | null;\n  isRecurring: boolean;\n}\n\ninterface ListParams {\n  limit?: Query<number>;\n  offset?: Query<number>;\n  categoryId?: Query<number>;\n  startDate?: Query<string>;\n  endDate?: Query<string>;\n  search?: Query<string>;\n}\n\ninterface ListResponse {\n  transactions: Transaction[];\n  total: number;\n}\n\n// Lists transactions with optional filters\nexport const list = api<ListParams, ListResponse>(\n  { auth: true, expose: true, method: \"GET\", path: \"/transactions\" },\n  async ({ limit, offset, categoryId, startDate, endDate, search }) => {\n    const authData = getAuthData()!;\n    const orgId = authData.organizationID;\n    if (!orgId) throw new Error(\"Organization ID required\");\n    let whereClause = \"WHERE 1=1\";\n    const params: any[] = [];\n    \n    if (categoryId) {\n      whereClause += ` AND t.category_id = $${params.length + 1}`;\n      params.push(categoryId);\n    }\n    \n    if (startDate) {\n      whereClause += ` AND t.date >= $${params.length + 1}`;\n      params.push(startDate);\n    }\n    \n    if (endDate) {\n      whereClause += ` AND t.date <= $${params.length + 1}`;\n      params.push(endDate);\n    }\n    \n    if (search) {\n      const paramNum = params.length + 1;\n      whereClause += ` AND (t.merchant ILIKE $${paramNum} OR t.description ILIKE $${paramNum})`;\n      params.push(`%${search}%`);\n    }\n\n    const query = `\n      SELECT \n        t.id, t.date, t.amount, t.merchant, t.description,\n        t.category_id as \"categoryId\", c.name as \"categoryName\", c.color as \"categoryColor\",\n        t.currency, t.payment_method as \"paymentMethod\", t.tags, t.notes, t.is_recurring as \"isRecurring\"\n      FROM transactions t\n      LEFT JOIN categories c ON t.category_id = c.id\n      ${whereClause}\n      ORDER BY t.date DESC\n      LIMIT $${params.length + 1} OFFSET $${params.length + 2}\n    `;\n    \n    const countQuery = `\n      SELECT COUNT(*) as total\n      FROM transactions t\n      ${whereClause}\n    `;\n\n    const transactions = await db.rawQueryAll<Transaction>(query, ...params, limit || 50, offset || 0);\n    const totalResult = await db.rawQueryRow<{ total: number }>(countQuery, ...params);\n\n    return {\n      transactions,\n      total: totalResult?.total || 0,\n    };\n  }\n);\n", "import { api, APIError } from \"encore.dev/api\";\nimport db from \"../db\";\n\ninterface UpdateParams {\n  id: number;\n  date?: Date;\n  amount?: number;\n  merchant?: string;\n  description?: string;\n  categoryId?: number;\n  currency?: string;\n  paymentMethod?: string;\n  tags?: string[];\n  notes?: string;\n  isRecurring?: boolean;\n}\n\ninterface Transaction {\n  id: number;\n  date: Date;\n  amount: number;\n  merchant: string;\n  description: string | null;\n  categoryId: number | null;\n  currency: string;\n  paymentMethod: string | null;\n  tags: string[];\n  notes: string | null;\n  isRecurring: boolean;\n}\n\n// Updates an existing transaction\nexport const update = api<UpdateParams, Transaction>(\n  { expose: true, method: \"PUT\", path: \"/transactions/:id\" },\n  async (params) => {\n    const updates: string[] = [];\n    const values: any[] = [];\n    let paramCount = 1;\n\n    if (params.date !== undefined) {\n      updates.push(`date = $${paramCount++}`);\n      values.push(params.date);\n    }\n    if (params.amount !== undefined) {\n      updates.push(`amount = $${paramCount++}`);\n      values.push(params.amount);\n    }\n    if (params.merchant !== undefined) {\n      updates.push(`merchant = $${paramCount++}`);\n      values.push(params.merchant);\n    }\n    if (params.description !== undefined) {\n      updates.push(`description = $${paramCount++}`);\n      values.push(params.description);\n    }\n    if (params.categoryId !== undefined) {\n      updates.push(`category_id = $${paramCount++}`);\n      values.push(params.categoryId);\n    }\n    if (params.currency !== undefined) {\n      updates.push(`currency = $${paramCount++}`);\n      values.push(params.currency);\n    }\n    if (params.paymentMethod !== undefined) {\n      updates.push(`payment_method = $${paramCount++}`);\n      values.push(params.paymentMethod);\n    }\n    if (params.tags !== undefined) {\n      updates.push(`tags = $${paramCount++}`);\n      values.push(params.tags);\n    }\n    if (params.notes !== undefined) {\n      updates.push(`notes = $${paramCount++}`);\n      values.push(params.notes);\n    }\n    if (params.isRecurring !== undefined) {\n      updates.push(`is_recurring = $${paramCount++}`);\n      values.push(params.isRecurring);\n    }\n\n    updates.push(`updated_at = NOW()`);\n    \n    const query = `\n      UPDATE transactions\n      SET ${updates.join(', ')}\n      WHERE id = $${paramCount}\n      RETURNING\n        id, date, amount, merchant, description,\n        category_id as \"categoryId\", currency,\n        payment_method as \"paymentMethod\", tags, notes,\n        is_recurring as \"isRecurring\"\n    `;\n\n    const result = await db.rawQueryRow<Transaction>(query, ...values, params.id);\n    \n    if (!result) {\n      throw APIError.notFound(\"transaction not found\");\n    }\n\n    return result;\n  }\n);\n", "import { api } from \"encore.dev/api\";\nimport { Bucket } from \"encore.dev/storage/objects\";\nimport db from \"../db\";\n\nconst uploadsBucket = new Bucket(\"uploads\", { public: false });\n\ninterface UploadResponse {\n  uploadId: number;\n  signedUrl: string;\n}\n\n// Generates a signed URL for uploading a file\nexport const getUploadUrl = api<{ filename: string }, UploadResponse>(\n  { expose: true, method: \"POST\", path: \"/upload/url\" },\n  async ({ filename }) => {\n    const uploadId = await db.queryRow<{ id: number }>`\n      INSERT INTO uploads (filename, status)\n      VALUES (${filename}, 'pending')\n      RETURNING id\n    `;\n\n    const objectName = `${uploadId!.id}/${filename}`;\n    const { url } = await uploadsBucket.signedUploadUrl(objectName, { ttl: 3600 });\n\n    return {\n      uploadId: uploadId!.id,\n      signedUrl: url,\n    };\n  }\n);\n\ninterface ProcessUploadParams {\n  uploadId: number;\n}\n\ninterface ProcessUploadResponse {\n  success: boolean;\n  totalRows: number;\n  errors?: string[];\n}\n\n// Processes an uploaded CSV file\nexport const processUpload = api<ProcessUploadParams, ProcessUploadResponse>(\n  { expose: true, method: \"POST\", path: \"/upload/:uploadId/process\" },\n  async ({ uploadId }) => {\n    const upload = await db.queryRow<{ filename: string }>`\n      SELECT filename FROM uploads WHERE id = ${uploadId}\n    `;\n\n    if (!upload) {\n      throw new Error(\"Upload not found\");\n    }\n\n    const objectName = `${uploadId}/${upload.filename}`;\n    const fileData = await uploadsBucket.download(objectName);\n    \n    // Parse CSV\n    const rows = parseCSV(fileData.toString());\n    const errors: string[] = [];\n    let successCount = 0;\n\n    for (const row of rows) {\n      try {\n        await db.exec`\n          INSERT INTO transactions (date, amount, merchant, description, currency)\n          VALUES (${row.date}, ${row.amount}, ${row.merchant}, ${row.description || ''}, ${row.currency || 'INR'})\n        `;\n        successCount++;\n      } catch (err) {\n        errors.push(`Row ${successCount + errors.length + 1}: ${err}`);\n      }\n    }\n\n    await db.exec`\n      UPDATE uploads\n      SET status = 'processed', processed_at = NOW(), total_rows = ${successCount}, errors = ${JSON.stringify(errors)}\n      WHERE id = ${uploadId}\n    `;\n\n    return {\n      success: errors.length === 0,\n      totalRows: successCount,\n      errors: errors.length > 0 ? errors : undefined,\n    };\n  }\n);\n\nfunction parseCSV(content: string): Array<{\n  date: Date;\n  amount: number;\n  merchant: string;\n  description?: string;\n  currency?: string;\n}> {\n  const lines = content.split('\\n').filter(line => line.trim());\n  const headers = lines[0].toLowerCase().split(',').map(h => h.trim());\n  \n  const dateIdx = headers.findIndex(h => h.includes('date'));\n  const amountIdx = headers.findIndex(h => h.includes('amount'));\n  const merchantIdx = headers.findIndex(h => h.includes('merchant') || h.includes('vendor') || h.includes('payee'));\n  const descIdx = headers.findIndex(h => h.includes('description') || h.includes('memo'));\n  const currencyIdx = headers.findIndex(h => h.includes('currency'));\n\n  return lines.slice(1).map(line => {\n    const cols = line.split(',').map(c => c.trim());\n    return {\n      date: new Date(cols[dateIdx]),\n      amount: parseFloat(cols[amountIdx]),\n      merchant: cols[merchantIdx] || 'Unknown',\n      description: descIdx >= 0 ? cols[descIdx] : undefined,\n      currency: currencyIdx >= 0 ? cols[currencyIdx] : undefined,\n    };\n  });\n}\n", "import { Service } from \"encore.dev/service\";\n\nexport default new Service(\"budget\");\n", "import { Service } from \"encore.dev/service\";\n\nexport default new Service(\"transaction\");\n", "import { Service } from \"encore.dev/service\";\n\nexport default new Service(\"ai\");\n", "import { Service } from \"encore.dev/service\";\n\nexport default new Service(\"auth\");\n", "import { Service } from \"encore.dev/service\";\n\nexport default new Service(\"dashboard\");\n", "import { Service } from \"encore.dev/service\";\n\nexport default new Service(\"category\");\n", "import { Service } from \"encore.dev/service\";\n\nexport default new Service(\"upload\");\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA,SAAS,eAAe,oBAAoB;AAKrC,SAAS,cAA+B;AAC3C,SAAO,aAAa;AACxB;AAPA;AAAA;AAAA;AAAA;AAAA;;;ACAA;AAAA;AAAA;AAAA;AAAA,IAAAA,aAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,SAAS,kBAAkB,kBAAkB,WAAyB;;;ACAtE,SAAS,mBAAmB,mBAAmB;AAC/C,SAAiB,UAAU,eAAe;AAC1C,SAAS,mBAAmB;AAC5B,SAAS,cAAc;AAEvB,IAAM,iBAAiB,OAAO,gBAAgB;AAC9C,IAAM,cAAc,kBAAkB,EAAE,WAAW,eAAe,EAAE,CAAC;AAa9D,IAAM,OAAO;AAAA,EAClB,OAAO,SAAS;AACd,UAAM,QAAQ,KAAK,eAAe,QAAQ,WAAW,EAAE;AACvD,QAAI,CAAC,OAAO;AACV,YAAM,SAAS,gBAAgB,eAAe;AAAA,IAChD;AAEA,QAAI;AACF,YAAM,gBAAgB,MAAM,YAAY,OAAO;AAAA,QAC7C,WAAW,eAAe;AAAA,MAC5B,CAAC;AAED,YAAM,OAAO,MAAM,YAAY,MAAM,QAAQ,cAAc,GAAG;AAE9D,YAAM,0BAA0B,MAAM,YAAY,MAAM,8BAA8B;AAAA,QACpF,QAAQ,KAAK;AAAA,MACf,CAAC;AAED,YAAM,eAAe,wBAAwB,KAAK,CAAC,GAAG,cAAc,MAAM;AAE1E,aAAO;AAAA,QACL,QAAQ,KAAK;AAAA,QACb,UAAU,KAAK;AAAA,QACf,OAAO,KAAK,eAAe,CAAC,GAAG,gBAAgB;AAAA,QAC/C,gBAAgB;AAAA,MAClB;AAAA,IACF,SAAS,KAAK;AACZ,YAAM,SAAS,gBAAgB,iBAAiB,GAAY;AAAA,IAC9D;AAAA,EACF;AACF;AAEO,IAAM,KAAK,IAAI,QAAQ,EAAE,aAAa,KAAK,CAAC;;;AClDnDC;AADA,SAAS,WAAW;;;ACApB,SAAS,mBAAmB;AAG5B,IAAO,aAAQ,IAAI,YAAY,YAAY;AAAA,EACzC,YAAY;AACd,CAAC;;;ADSM,IAAM,kBAAkB;AAAA,EAC7B,EAAE,MAAM,MAAM,QAAQ,MAAM,QAAQ,QAAQ,MAAM,sCAAsC;AAAA,EACxF,OAAO,EAAE,eAAe,YAAAC,YAAW,MAAM;AACvC,UAAM,WAAW,YAAY;AAC7B,UAAM,QAAQ,SAAS;AACvB,QAAI,CAAC;AAAO,YAAM,IAAI,MAAM,0BAA0B;AAEtD,UAAM,MAAM,MAAM,WAAG;AAAA;AAAA;AAAA,mBAON,aAAa,0BAA0B,KAAK;AAAA;AAG3D,QAAI,CAAC,OAAO,CAAC,IAAI,aAAa;AAC5B,YAAM,IAAI,MAAM,qDAAqD;AAAA,IACvE;AAEA,UAAM,WAAG;AAAA;AAAA;AAAA,qBAGQ,IAAI,WAAW;AAAA;AAAA,mBAEjB,aAAa;AAAA;AAG5B,QAAI,cAAc;AAClB,QAAIA,eAAc,IAAI,UAAU;AAC9B,YAAM,qBAAqB,IAAI,SAAS,YAAY,EAAE,KAAK;AAE3D,YAAM,eAAe,MAAM,WAAG;AAAA;AAAA,kCAEF,KAAK;AAAA,mCACJ,kBAAkB;AAAA;AAG/C,UAAI,CAAC,cAAc;AACjB,cAAM,WAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAMH,KAAK,KAAK,kBAAkB,KAAK,IAAI,WAAW;AAAA,6BACjC,SAAS,MAAM;AAAA;AAAA;AAGpC,sBAAc;AAAA,MAChB;AAAA,IACF;AAEA,WAAO,EAAE,SAAS,MAAM,YAAY;AAAA,EACtC;AACF;;;AErEAC;AADA,SAAS,OAAAC,YAAW;AAcb,IAAM,kBAAkBC;AAAA,EAC7B,EAAE,MAAM,MAAM,QAAQ,MAAM,QAAQ,QAAQ,MAAM,uBAAuB;AAAA,EACzE,OAAO,EAAE,OAAO,MAAM;AACpB,UAAM,WAAW,YAAY;AAC7B,UAAM,QAAQ,SAAS;AACvB,QAAI,CAAC;AAAO,YAAM,IAAI,MAAM,0BAA0B;AAEtD,UAAM,eAAe,MAAM,WAAG;AAAA;AAAA;AAAA;AAAA,gCAWF,KAAK;AAAA,yBACZ,MAAM;AAAA;AAAA;AAAA;AAK3B,QAAI,cAAc;AAClB,QAAI,UAAU;AAEd,eAAW,OAAO,cAAc;AAC9B,UAAI,IAAI,oBAAoB;AAC1B;AACA;AAAA,MACF;AAEA,YAAM,SAAS,MAAM;AAAA,QACnB;AAAA,QACA,IAAI,YAAY,IAAI;AAAA,QACpB,IAAI;AAAA,QACJ,IAAI;AAAA,MACN;AAEA,UAAI,QAAQ;AACV,cAAM,WAAG;AAAA;AAAA;AAAA,4BAGW,OAAO,QAAQ;AAAA,8BACb,OAAO,UAAU;AAAA,+BAChB,OAAO,WAAW;AAAA,8BACnB,OAAO,YAAY;AAAA,4CACL,OAAO,QAAQ;AAAA,uBACpC,IAAI,EAAE;AAAA;AAErB;AAAA,MACF,OAAO;AACL;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,MACL,gBAAgB,aAAa;AAAA,MAC7B;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;AAEA,eAAe,4BACb,OACA,UACA,QACA,aAMQ;AACR,QAAM,qBAAqB,SAAS,YAAY,EAAE,KAAK;AAEvD,QAAM,eAAe,MAAM,WAAG;AAAA;AAAA;AAAA,8BAMF,KAAK;AAAA,YACvB,kBAAkB;AAAA;AAAA;AAAA;AAK5B,MAAI,cAAc;AAChB,UAAM,WAAG;AAAA;AAAA;AAAA,gCAGmB,KAAK;AAAA,yBACZ,aAAa,QAAQ;AAAA;AAG1C,WAAO;AAAA,MACL,UAAU,aAAa;AAAA,MACvB,YAAY,aAAa;AAAA,MACzB,aAAa;AAAA,MACb,cAAc;AAAA,IAChB;AAAA,EACF;AAEA,QAAM,kBAAkB,MAAM,WAAG;AAAA;AAAA;AAAA,8BAKL,KAAK;AAAA;AAAA,8BAEL,kBAAkB;AAAA;AAAA;AAI9C,MAAI,iBAAiB;AACnB,WAAO;AAAA,MACL,UAAU,gBAAgB;AAAA,MAC1B,YAAY;AAAA,MACZ,aAAa,8BAA8B,QAAQ;AAAA,MACnD,cAAc;AAAA,IAChB;AAAA,EACF;AAEA,QAAM,gBAAgB,0BAA0B,oBAAoB,MAAM;AAC1E,MAAI,eAAe;AACjB,WAAO;AAAA,MACL,UAAU,cAAc;AAAA,MACxB,YAAY,cAAc;AAAA,MAC1B,aAAa,cAAc;AAAA,MAC3B,cAAc;AAAA,IAChB;AAAA,EACF;AAEA,SAAO;AACT;AAEA,SAAS,0BACP,UACA,QACsE;AACtE,QAAM,WAAW;AAAA,IACf,EAAE,UAAU,CAAC,UAAU,UAAU,aAAa,QAAQ,cAAc,MAAM,GAAG,UAAU,iBAAiB,YAAY,IAAI;AAAA,IACxH,EAAE,UAAU,CAAC,UAAU,YAAY,UAAU,YAAY,OAAO,GAAG,UAAU,YAAY,YAAY,KAAK;AAAA,IAC1G,EAAE,UAAU,CAAC,QAAQ,OAAO,QAAQ,aAAa,SAAS,KAAK,GAAG,UAAU,kBAAkB,YAAY,IAAI;AAAA,IAC9G,EAAE,UAAU,CAAC,WAAW,WAAW,SAAS,cAAc,GAAG,UAAU,iBAAiB,YAAY,KAAK;AAAA,IACzG,EAAE,UAAU,CAAC,eAAe,SAAS,OAAO,WAAW,MAAM,GAAG,UAAU,aAAa,YAAY,IAAI;AAAA,IACvG,EAAE,UAAU,CAAC,QAAQ,SAAS,SAAS,GAAG,UAAU,WAAW,YAAY,KAAK;AAAA,IAChF,EAAE,UAAU,CAAC,YAAY,UAAU,YAAY,WAAW,QAAQ,GAAG,UAAU,cAAc,YAAY,IAAI;AAAA,IAC7G,EAAE,UAAU,CAAC,OAAO,WAAW,MAAM,GAAG,UAAU,WAAW,YAAY,IAAI;AAAA,EAC/E;AAEA,aAAW,WAAW,UAAU;AAC9B,QAAI,QAAQ,SAAS,KAAK,QAAM,SAAS,SAAS,EAAE,CAAC,GAAG;AACtD,aAAO;AAAA,QACL,UAAU,QAAQ;AAAA,QAClB,YAAY,QAAQ;AAAA,QACpB,aAAa,8CAA8C,QAAQ,QAAQ;AAAA,MAC7E;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;;;ACnLA,SAAS,OAAAC,YAAW;AACpB,SAAS,eAAe;AAQxB,eAAe,sBAAsB,OAAgC;AACnE,QAAM,aAAa,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,KAAK,KAAK,GAAI,EAAE,YAAY;AAE/E,QAAM,gBAAgB,MAAM,WAAG;AAAA;AAAA;AAAA;AAAA;AAAA,8BAQH,KAAK;AAAA,oBACf,UAAU;AAAA;AAAA;AAAA;AAAA;AAM5B,MAAI,cAAc,SAAS,GAAG;AAC5B,WAAO;AAAA,EACT;AAEA,QAAM,UAAU,cAAc,IAAI,OAAK,EAAE,KAAK;AAC9C,QAAM,OAAO,QAAQ,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI,QAAQ;AAC1D,QAAM,SAAS,KAAK;AAAA,IAClB,QAAQ,IAAI,OAAK,KAAK,IAAI,IAAI,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI,QAAQ;AAAA,EAC/E;AAEA,QAAM,gBAAgB,CAAC,GAAG,OAAO,EAAE,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AACvD,QAAM,SAAS,cAAc,KAAK,MAAM,cAAc,SAAS,CAAC,CAAC;AACjE,QAAM,aAAa,QAAQ,IAAI,OAAK,KAAK,IAAI,IAAI,MAAM,CAAC;AACxD,QAAM,MAAM,WAAW,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC,EAAE,KAAK,MAAM,WAAW,SAAS,CAAC,CAAC,IAAI;AAElF,MAAI,oBAAoB;AAExB,aAAW,OAAO,eAAe;AAC/B,UAAM,SAAS,SAAS,IAAI,KAAK,KAAK,IAAI,QAAQ,QAAQ,MAAM,IAAI;AACpE,UAAM,WAAW,MAAM,IAAI,KAAK,KAAK,IAAI,QAAQ,UAAU,GAAG,IAAI;AAElE,QAAI,WAA0B;AAC9B,QAAI,OAAO;AAEX,QAAI,SAAS,KAAK,WAAW,KAAK;AAChC,iBAAW;AAAA,IACb,WAAW,SAAS,OAAO,WAAW,GAAG;AACvC,iBAAW;AAAA,IACb,WAAW,SAAS,KAAK,WAAW,KAAK;AACvC,iBAAW;AAAA,IACb;AAEA,QAAI,UAAU;AACZ,YAAM,WAAW,MAAM,WAAG;AAAA;AAAA,kCAEE,KAAK;AAAA,uBAChB,IAAI,IAAI;AAAA;AAGzB,UAAI,CAAC,UAAU;AACb,cAAM,WAAG;AAAA;AAAA;AAAA;AAAA;AAAA,cAKH,KAAK,KAAK,IAAI,IAAI,KAAK,IAAI,KAAK,KAAK,MAAM,KAAK,QAAQ,KAAK,IAAI,KAAK,QAAQ;AAAA;AAAA;AAGpF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;AAEO,IAAM,kBAAkBC;AAAA,EAC7B,EAAE,MAAM,OAAO,QAAQ,OAAO,QAAQ,QAAQ,MAAM,uBAAuB;AAAA,EAC3E,YAAY;AACV,UAAM,OAAO,MAAM,WAAG;AAAA;AAAA;AAAA;AAAA;AAMtB,QAAI,gBAAgB;AAEpB,eAAW,OAAO,MAAM;AACtB,YAAM,WAAW,MAAM,sBAAsB,IAAI,EAAE;AACnD,uBAAiB;AAAA,IACnB;AAEA,WAAO;AAAA,MACL,UAAU;AAAA,MACV,eAAe,KAAK;AAAA,IACtB;AAAA,EACF;AACF;AAEO,IAAM,sBAAsBA;AAAA,EACjC,EAAE,MAAM,OAAO,QAAQ,OAAO,QAAQ,QAAQ,MAAM,4BAA4B;AAAA,EAChF,YAAY;AACV,WAAO,MAAM,gBAAgB,CAAC,CAAC;AAAA,EACjC;AACF;AAEA,IAAM,IAAI,IAAI,QAAQ,qBAAqB;AAAA,EACzC,OAAO;AAAA,EACP,UAAU;AAAA,EACV,UAAU;AACZ,CAAC;AAeM,IAAM,eAAeA;AAAA,EAC1B,EAAE,MAAM,MAAM,QAAQ,MAAM,QAAQ,OAAO,MAAM,gBAAgB;AAAA,EACjE,YAAY;AACV,UAAM,EAAE,aAAAC,aAAY,IAAI,MAAM;AAC9B,UAAM,WAAWA,aAAY;AAC7B,UAAM,QAAQ,SAAS;AACvB,QAAI,CAAC;AAAO,YAAM,IAAI,MAAM,0BAA0B;AAEtD,UAAM,YAAY,MAAM,WAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAeC,KAAK;AAAA;AAAA;AAAA;AAKjC,WAAO;AAAA,MACL,WAAW,UAAU,IAAI,QAAM;AAAA,QAC7B,IAAI,EAAE;AAAA,QACN,MAAM,EAAE;AAAA,QACR,QAAQ,EAAE;AAAA,QACV,QAAQ,EAAE;AAAA,QACV,UAAU,EAAE;AAAA,QACZ,MAAM,EAAE;AAAA,QACR,UAAU,EAAE;AAAA,QACZ,cAAc,EAAE;AAAA,MAClB,EAAE;AAAA,IACJ;AAAA,EACF;AACF;AAMO,IAAM,qBAAqBD;AAAA,EAChC,EAAE,MAAM,MAAM,QAAQ,MAAM,QAAQ,QAAQ,MAAM,uCAAuC;AAAA,EACzF,OAAO,EAAE,UAAU,MAAM;AACvB,UAAM,EAAE,aAAAC,aAAY,IAAI,MAAM;AAC9B,UAAM,WAAWA,aAAY;AAC7B,UAAM,QAAQ,SAAS;AACvB,QAAI,CAAC;AAAO,YAAM,IAAI,MAAM,0BAA0B;AAEtD,UAAM,WAAG;AAAA;AAAA;AAAA,mBAGM,SAAS,0BAA0B,KAAK;AAAA;AAGvD,WAAO,EAAE,SAAS,KAAK;AAAA,EACzB;AACF;;;AClMAC;AADA,SAAS,OAAAC,YAAW;AAWb,IAAM,cAAcC;AAAA,EACzB,EAAE,MAAM,MAAM,QAAQ,MAAM,QAAQ,OAAO,MAAM,eAAe;AAAA,EAChE,YAAY;AACV,UAAM,WAAW,YAAY;AAC7B,UAAM,QAAQ,SAAS;AACvB,QAAI,CAAC;AAAO,YAAM,IAAI,MAAM,0BAA0B;AAEtD,UAAM,WAAW,MAAM,WAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAON,SAAS,MAAM;AAAA;AAGnC,QAAI,CAAC,UAAU;AACb,YAAM,WAAG;AAAA;AAAA,kBAEG,SAAS,MAAM,KAAK,KAAK;AAAA;AAGrC,aAAO;AAAA,QACL,mBAAmB;AAAA,QACnB,yBAAyB;AAAA,QACzB,oBAAoB;AAAA,QACpB,aAAa;AAAA,MACf;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AACF;AASO,IAAM,iBAAiBA;AAAA,EAC5B,EAAE,MAAM,MAAM,QAAQ,MAAM,QAAQ,OAAO,MAAM,eAAe;AAAA,EAChE,OAAO,WAAW;AAChB,UAAM,WAAW,YAAY;AAC7B,UAAM,QAAQ,SAAS;AACvB,QAAI,CAAC;AAAO,YAAM,IAAI,MAAM,0BAA0B;AAEtD,UAAM,UAAoB,CAAC;AAC3B,UAAM,SAAgB,CAAC;AAEvB,QAAI,OAAO,sBAAsB,QAAW;AAC1C,cAAQ,KAAK,6BAA6B,OAAO,SAAS,EAAE;AAC5D,aAAO,KAAK,OAAO,iBAAiB;AAAA,IACtC;AACA,QAAI,OAAO,4BAA4B,QAAW;AAChD,cAAQ,KAAK,mCAAmC,OAAO,SAAS,EAAE;AAClE,aAAO,KAAK,OAAO,uBAAuB;AAAA,IAC5C;AACA,QAAI,OAAO,uBAAuB,QAAW;AAC3C,cAAQ,KAAK,8BAA8B,OAAO,SAAS,EAAE;AAC7D,aAAO,KAAK,OAAO,kBAAkB;AAAA,IACvC;AACA,QAAI,OAAO,gBAAgB,QAAW;AACpC,cAAQ,KAAK,sBAAsB,OAAO,SAAS,EAAE;AACrD,aAAO,KAAK,OAAO,WAAW;AAAA,IAChC;AAEA,QAAI,QAAQ,SAAS,GAAG;AACtB,YAAM,QAAQ;AAAA;AAAA,cAEN,QAAQ,KAAK,IAAI,CAAC;AAAA,2BACL,OAAO,SAAS,CAAC;AAAA;AAEtC,YAAM,WAAG,QAAQ,OAAO,GAAG,QAAQ,SAAS,MAAM;AAAA,IACpD;AAEA,WAAO,MAAM,YAAY,CAAC,CAAC;AAAA,EAC7B;AACF;;;ACzFAC;AAFA,SAAS,OAAAC,YAAW;AAuBb,IAAM,cAAcC;AAAA,EACzB,EAAE,MAAM,MAAM,QAAQ,MAAM,QAAQ,OAAO,MAAM,eAAe;AAAA,EAChE,OAAO,EAAE,aAAa,UAAU,MAAM;AACpC,UAAM,WAAW,YAAY;AAC7B,UAAM,QAAQ,SAAS;AACvB,QAAI,CAAC;AAAO,YAAM,IAAI,MAAM,0BAA0B;AAEtD,UAAM,WAAW,MAAM,WAAG;AAAA;AAAA;AAAA,wBAGN,SAAS,MAAM;AAAA;AAGnC,QAAI,YAAY,CAAC,SAAS,qBAAqB;AAC7C,aAAO;AAAA,QACL,SAAS,CAAC;AAAA,QACV,SAAS;AAAA,QACT,aAAa,eAAe;AAAA,QAC5B,WAAW,aAAa;AAAA,MAC1B;AAAA,IACF;AAEA,UAAM,QAAQ,eAAe,IAAI,MAAK,oBAAI,KAAK,GAAE,YAAY,IAAG,oBAAI,KAAK,GAAE,SAAS,GAAG,CAAC,EAAE,YAAY;AACtG,UAAM,MAAM,cAAa,oBAAI,KAAK,GAAE,YAAY;AAEhD,UAAM,SAAS,MAAM,WAAG;AAAA;AAAA;AAAA,gCAMI,KAAK;AAAA,6BACR,KAAK;AAAA,2BACP,GAAG;AAAA;AAAA;AAAA;AAK1B,QAAI,QAAQ;AACV,aAAO;AAAA,QACL,SAAS,OAAO;AAAA,QAChB,SAAS,OAAO;AAAA,QAChB,aAAa;AAAA,QACb,WAAW;AAAA,MACb;AAAA,IACF;AAEA,UAAM,WAAW,MAAM,iBAAiB,OAAO,OAAO,GAAG;AAEzD,UAAM,WAAG;AAAA;AAAA,gBAEG,KAAK,KAAK,KAAK,KAAK,GAAG,KAAK,KAAK,UAAU,SAAS,OAAO,CAAC,KAAK,SAAS,OAAO;AAAA;AAG7F,WAAO;AAAA,MACL,GAAG;AAAA,MACH,aAAa;AAAA,MACb,WAAW;AAAA,IACb;AAAA,EACF;AACF;AAEA,eAAe,iBACb,OACA,OACA,KACiD;AACjD,QAAM,qBAAqB,MAAM,WAAG;AAAA;AAAA;AAAA;AAAA,8DAQwB,GAAG,iBAAiB,KAAK;AAAA;AAAA,8BAEzD,KAAK;AAAA,oBACf,KAAK;AAAA,oBACL,GAAG;AAAA;AAAA;AAIrB,QAAM,YAAY,IAAI,KAAK,IAAI,KAAK,KAAK,EAAE,QAAQ,IAAI,KAAK,KAAK,KAAK,KAAK,GAAI,EAAE,YAAY;AAC7F,QAAM,UAAU;AAEhB,QAAM,kBAAkB,MAAM,WAAG;AAAA;AAAA;AAAA,8BAKL,KAAK;AAAA,oBACf,SAAS;AAAA,mBACV,OAAO;AAAA;AAAA;AAIxB,QAAM,gBAAgB,MAAM,WAAG;AAAA;AAAA;AAAA;AAAA;AAAA,8BAQH,KAAK;AAAA,oBACf,KAAK;AAAA,oBACL,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAOrB,QAAM,YAAY,MAAM,WAAG;AAAA;AAAA;AAAA,8BAOC,KAAK;AAAA,oBACf,KAAK;AAAA,oBACL,GAAG;AAAA;AAAA;AAAA;AAAA;AAMrB,QAAM,UAAoB,CAAC;AAE3B,QAAM,YAAY,mBAAmB,gBAAgB,QAAQ,KACvD,mBAAoB,QAAQ,gBAAgB,SAAS,gBAAgB,QAAS,MAChF;AAEJ,MAAI,KAAK,IAAI,SAAS,IAAI,IAAI;AAC5B,YAAQ,KAAK;AAAA,MACX,MAAM,YAAY,YAAY,IAAI,cAAc,WAAW,OAAO,KAAK,IAAI,SAAS,EAAE,QAAQ,CAAC,CAAC;AAAA,MAChG,MAAM,YAAY,KAAK,YAAY,YAAY,MAAM,YAAY;AAAA,IACnE,CAAC;AAAA,EACH;AAEA,MAAI,cAAc,SAAS,GAAG;AAC5B,YAAQ,KAAK;AAAA,MACX,MAAM,iBAAiB,cAAc,CAAC,EAAE,QAAQ,MAAM,cAAc,CAAC,EAAE,MAAM,QAAQ,CAAC,CAAC;AAAA,MACvF,MAAM;AAAA,MACN,MAAM,0BAA0B,cAAc,CAAC,EAAE,QAAQ;AAAA,IAC3D,CAAC;AAAA,EACH;AAEA,MAAI,UAAU,SAAS,GAAG;AACxB,YAAQ,KAAK;AAAA,MACX,MAAM,GAAG,UAAU,MAAM,qBAAqB,UAAU,WAAW,IAAI,QAAQ,MAAM;AAAA,MACrF,MAAM;AAAA,IACR,CAAC;AAAA,EACH;AAEA,MAAI,mBAAoB,YAAY,GAAG;AACrC,YAAQ,KAAK;AAAA,MACX,MAAM,yBAAyB,mBAAoB,UAAU,QAAQ,CAAC,CAAC;AAAA,MACvE,MAAM;AAAA,IACR,CAAC;AAAA,EACH;AAEA,QAAM,UAAU,0BAA0B,mBAAoB,MAAM,QAAQ,CAAC,CAAC,WAAW,mBAAoB,KAAK,kBAChH,YAAY,KACR,yBAAyB,UAAU,QAAQ,CAAC,CAAC,iDAAiD,cAAc,CAAC,GAAG,YAAY,oBAAoB,MAChJ,YAAY,MACZ,oCAAoC,KAAK,IAAI,SAAS,EAAE,QAAQ,CAAC,CAAC,8BAClE,6DACN,GAAG,UAAU,SAAS,IAAI,gBAAgB,UAAU,MAAM,6DAA6D,EAAE;AAEzH,SAAO,EAAE,SAAS,QAAQ;AAC5B;;;ACpMA,SAAS,OAAAC,YAAW;AACpB,SAAS,UAAAC,eAAc;AAEvB,SAAS,oBAAoB;AAE7B,IAAM,cAAcA,QAAO,aAAa;AACxC,IAAM,qBAAqBA,QAAO,oBAAoB;AAa/C,IAAM,eAAeD;AAAA,EAC1B,EAAE,MAAM,OAAO,QAAQ,MAAM,QAAQ,QAAQ,MAAM,mBAAmB,WAAW,IAAI,OAAO,KAAK;AAAA,EACjG,OAAO,UAA4D;AACjE,UAAM,WAAW,aAAa,YAAY,GAAG,mBAAmB,GAAG;AAAA,MACjE,MAAM;AAAA,QACJ,kBAAkB;AAAA,QAClB,gBAAgB;AAAA,MAClB;AAAA,IACF,CAAC;AAED,QAAI,MAAM,SAAS,kBAAkB,MAAM,SAAS,gBAAgB;AAClE,YAAM,cAAc,MAAM,KAAK;AAC/B,YAAM,QAAQ,MAAM,KAAK,gBAAgB,CAAC,GAAG;AAC7C,YAAM,OAAO,MAAM,KAAK,cAAc,MAAM,KAAK,YAC7C,GAAG,MAAM,KAAK,UAAU,IAAI,MAAM,KAAK,SAAS,KAChD,MAAM,KAAK,cAAc,MAAM,KAAK,aAAa;AACrD,YAAM,WAAW,MAAM,KAAK;AAE5B,UAAI,CAAC,OAAO;AACV,gBAAQ,MAAM,2BAA2B,WAAW;AACpD,eAAO,EAAE,SAAS,MAAM;AAAA,MAC1B;AAEA,YAAM,EAAE,MAAM,aAAa,IAAI,MAAM,SAAS,KAAK,MAAM,YAAY,WAAW;AAEhF,UAAI,aAAa,MAAM;AACrB,cAAM,SAAS,KAAK,MAAM,eAAe,aAAa;AAAA,UACpD;AAAA,UACA,eAAe;AAAA,YACb;AAAA,YACA,OAAO;AAAA,UACT;AAAA,QACF,CAAC;AAAA,MACH,OAAO;AACL,cAAM,EAAE,MAAM,IAAI,MAAM,SAAS,KAAK,MAAM,WAAW;AAAA,UACrD,IAAI;AAAA,UACJ;AAAA,UACA,eAAe;AAAA,UACf,eAAe;AAAA,YACb;AAAA,YACA,OAAO;AAAA,UACT;AAAA,QACF,CAAC;AAED,YAAI,OAAO;AACT,kBAAQ,MAAM,oCAAoC,KAAK;AACvD,iBAAO,EAAE,SAAS,MAAM;AAAA,QAC1B;AAAA,MACF;AAEA,aAAO,EAAE,SAAS,KAAK;AAAA,IACzB;AAEA,QAAI,MAAM,SAAS,gBAAgB;AACjC,YAAM,cAAc,MAAM,KAAK;AAE/B,YAAM,EAAE,MAAM,IAAI,MAAM,SAAS,KAAK,MAAM,WAAW,WAAW;AAElE,UAAI,OAAO;AACT,gBAAQ,MAAM,sCAAsC,KAAK;AACzD,eAAO,EAAE,SAAS,MAAM;AAAA,MAC1B;AAEA,aAAO,EAAE,SAAS,KAAK;AAAA,IACzB;AAEA,WAAO,EAAE,SAAS,KAAK;AAAA,EACzB;AACF;;;ACtFAE;AADA,SAAS,OAAAC,YAAW;AAUb,IAAM,cAAcA;AAAA,EACzB,EAAE,MAAM,MAAM,QAAQ,MAAM,QAAQ,OAAO,MAAM,WAAW;AAAA,EAC5D,YAAY;AACV,UAAM,WAAW,YAAY;AAC7B,WAAO;AAAA,MACL,IAAI,SAAS;AAAA,MACb,OAAO,SAAS;AAAA,MAChB,UAAU,SAAS;AAAA,MACnB,gBAAgB,SAAS;AAAA,IAC3B;AAAA,EACF;AACF;;;ACpBAC;AADA,SAAS,OAAAC,YAAW;;;ACEpB,SAAS,eAAAC,oBAAmB;AAE5B,IAAOC,cAAQ,IAAID,aAAY,MAAM;AAAA,EACnC,YAAY;AAAA;AAEd,CAAC;;;ADeM,IAAM,SAASE;AAAA,EACpB,EAAE,MAAM,MAAM,QAAQ,MAAM,QAAQ,QAAQ,MAAM,WAAW;AAAA,EAC7D,OAAO,WAAW;AAChB,UAAM,WAAW,YAAY;AAC7B,UAAM,QAAQ,SAAS;AACvB,QAAI,CAAC;AAAO,YAAM,IAAI,MAAM,0BAA0B;AACtD,UAAM,SAAS,MAAMC,YAAG;AAAA;AAAA;AAAA,UAGlB,OAAO,UAAU;AAAA,UACjB,OAAO,MAAM;AAAA,UACb,OAAO,WAAW;AAAA,UAClB,OAAO,SAAS;AAAA,UAChB,OAAO,kBAAkB,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQlC,WAAO;AAAA,EACT;AACF;;;AE5CAC;AADA,SAAS,OAAAC,YAAW;AAsBb,IAAM,OAAOC;AAAA,EAClB,EAAE,MAAM,MAAM,QAAQ,MAAM,QAAQ,OAAO,MAAM,WAAW;AAAA,EAC5D,YAAY;AACV,UAAM,WAAW,YAAY;AAC7B,UAAM,QAAQ,SAAS;AACvB,QAAI,CAAC;AAAO,YAAM,IAAI,MAAM,0BAA0B;AACtD,UAAM,UAAU,MAAMC,YAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBzB,WAAO,EAAE,QAAQ;AAAA,EACnB;AACF;;;ACjDAC;AADA,SAAS,OAAAC,aAAW;AAqBb,IAAMC,UAASC;AAAA,EACpB,EAAE,MAAM,MAAM,QAAQ,MAAM,QAAQ,QAAQ,MAAM,cAAc;AAAA,EAChE,OAAO,WAAW;AAChB,UAAM,WAAW,YAAY;AAC7B,UAAM,QAAQ,SAAS;AACvB,QAAI,CAAC;AAAO,YAAM,IAAI,MAAM,0BAA0B;AACtD,UAAM,SAAS,MAAMC,YAAG;AAAA;AAAA;AAAA,UAGlB,OAAO,IAAI;AAAA,UACX,OAAO,SAAS,SAAS;AAAA,UACzB,OAAO,QAAQ,IAAI;AAAA,UACnB,OAAO,YAAY,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAS7B,WAAO;AAAA,EACT;AACF;;;AC3CAC;AADA,SAAS,OAAAC,aAAW;AAkBb,IAAMC,QAAOC;AAAA,EAClB,EAAE,MAAM,MAAM,QAAQ,MAAM,QAAQ,OAAO,MAAM,cAAc;AAAA,EAC/D,YAAY;AACV,UAAM,WAAW,YAAY;AAC7B,UAAM,QAAQ,SAAS;AACvB,QAAI,CAAC;AAAO,YAAM,IAAI,MAAM,0BAA0B;AACtD,UAAM,aAAa,MAAMC,YAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAS5B,WAAO,EAAE,WAAW;AAAA,EACtB;AACF;;;ACnCA,SAAS,OAAAC,aAAW;AAiBb,IAAM,YAAYC;AAAA,EACvB,EAAE,QAAQ,MAAM,QAAQ,OAAO,MAAM,oBAAoB;AAAA,EACzD,YAAY;AACV,UAAM,QAAQ,MAAMC,YAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASvB,WAAO,EAAE,MAAM;AAAA,EACjB;AACF;AAUO,IAAM,aAAaD;AAAA,EACxB,EAAE,QAAQ,MAAM,QAAQ,QAAQ,MAAM,oBAAoB;AAAA,EAC1D,OAAO,WAAW;AAChB,UAAM,SAAS,MAAMC,YAAG;AAAA;AAAA;AAAA,UAGlB,OAAO,OAAO;AAAA,UACd,OAAO,UAAU;AAAA,UACjB,OAAO,YAAY,CAAC;AAAA,UACpB,OAAO,cAAc,CAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ9B,WAAO;AAAA,EACT;AACF;;;AC3DAC;AADA,SAAS,OAAAC,aAAW;AAuCb,IAAM,WAAWC;AAAA,EACtB,EAAE,MAAM,MAAM,QAAQ,MAAM,QAAQ,OAAO,MAAM,mBAAmB;AAAA,EACpE,OAAO,EAAE,WAAW,QAAQ,MAAM;AAChC,UAAM,WAAW,YAAY;AAC7B,UAAM,QAAQ,SAAS;AACvB,QAAI,CAAC;AAAO,YAAM,IAAI,MAAM,0BAA0B;AACtD,UAAM,WAAW,aAAa,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,KAAK,KAAK,GAAI,EAAE,YAAY;AAC1F,UAAM,SAAS,YAAW,oBAAI,KAAK,GAAE,YAAY;AAEjD,UAAM,SAAS,MAAMC,YAAG;AAAA;AAAA;AAAA;AAAA;AAAA,sBAKN,QAAQ,gBAAgB,MAAM;AAAA;AAGhD,UAAM,oBAAoB,MAAMA,YAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAQf,QAAQ,kBAAkB,MAAM;AAAA;AAAA;AAAA;AAAA;AAMpD,UAAM,aAAa,MAAMA,YAAG;AAAA;AAAA;AAAA;AAAA;AAAA,sBAKV,QAAQ,gBAAgB,MAAM;AAAA;AAAA;AAAA;AAKhD,UAAM,eAAe,MAAMA,YAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAMZ,QAAQ,gBAAgB,MAAM;AAAA;AAAA;AAAA;AAAA;AAMhD,UAAM,OAAO,KAAK,MAAM,IAAI,KAAK,MAAM,EAAE,QAAQ,IAAI,IAAI,KAAK,QAAQ,EAAE,QAAQ,MAAM,MAAO,KAAK,KAAK,GAAG,KAAK;AAE/G,WAAO;AAAA,MACL,YAAY,QAAQ,SAAS;AAAA,MAC7B,kBAAkB,QAAQ,SAAS;AAAA,MACnC,YAAY,QAAQ,SAAS,KAAK;AAAA,MAClC,aAAa,kBAAkB,CAAC,KAAK;AAAA,MACrC;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;;;ACvGAC;AADA,SAAS,OAAAC,aAAW;AAgCb,IAAMC,UAASC;AAAA,EACpB,EAAE,MAAM,MAAM,QAAQ,MAAM,QAAQ,QAAQ,MAAM,gBAAgB;AAAA,EAClE,OAAO,WAAW;AAChB,UAAM,WAAW,YAAY;AAC7B,UAAM,QAAQ,SAAS;AACvB,QAAI,CAAC;AAAO,YAAM,IAAI,MAAM,0BAA0B;AACtD,UAAM,SAAS,MAAMC,YAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAMlB,OAAO,IAAI,KAAK,OAAO,MAAM,KAAK,OAAO,QAAQ;AAAA,UACjD,OAAO,eAAe,IAAI,KAAK,OAAO,cAAc,IAAI;AAAA,UACxD,OAAO,YAAY,KAAK,KAAK,OAAO,iBAAiB,IAAI;AAAA,UACzD,OAAO,QAAQ,CAAC,CAAC,KAAK,OAAO,SAAS,IAAI;AAAA,UAC1C,OAAO,eAAe,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASjC,WAAO;AAAA,EACT;AACF;;;AC3DA,SAAS,OAAAC,aAAW;AAIb,IAAM,oBAAoBC;AAAA,EAC/B,EAAE,QAAQ,MAAM,QAAQ,UAAU,MAAM,oBAAoB;AAAA,EAC5D,OAAO,EAAE,GAAG,MAAM;AAChB,UAAMC,YAAG,2CAA2C,EAAE;AAAA,EACxD;AACF;;;ACRAC;AADA,SAAS,OAAAC,aAAW;AAoCb,IAAMC,QAAOC;AAAA,EAClB,EAAE,MAAM,MAAM,QAAQ,MAAM,QAAQ,OAAO,MAAM,gBAAgB;AAAA,EACjE,OAAO,EAAE,OAAO,QAAQ,YAAY,WAAW,SAAS,OAAO,MAAM;AACnE,UAAM,WAAW,YAAY;AAC7B,UAAM,QAAQ,SAAS;AACvB,QAAI,CAAC;AAAO,YAAM,IAAI,MAAM,0BAA0B;AACtD,QAAI,cAAc;AAClB,UAAM,SAAgB,CAAC;AAEvB,QAAI,YAAY;AACd,qBAAe,yBAAyB,OAAO,SAAS,CAAC;AACzD,aAAO,KAAK,UAAU;AAAA,IACxB;AAEA,QAAI,WAAW;AACb,qBAAe,mBAAmB,OAAO,SAAS,CAAC;AACnD,aAAO,KAAK,SAAS;AAAA,IACvB;AAEA,QAAI,SAAS;AACX,qBAAe,mBAAmB,OAAO,SAAS,CAAC;AACnD,aAAO,KAAK,OAAO;AAAA,IACrB;AAEA,QAAI,QAAQ;AACV,YAAM,WAAW,OAAO,SAAS;AACjC,qBAAe,2BAA2B,QAAQ,4BAA4B,QAAQ;AACtF,aAAO,KAAK,IAAI,MAAM,GAAG;AAAA,IAC3B;AAEA,UAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAOV,WAAW;AAAA;AAAA,eAEJ,OAAO,SAAS,CAAC,YAAY,OAAO,SAAS,CAAC;AAAA;AAGzD,UAAM,aAAa;AAAA;AAAA;AAAA,QAGf,WAAW;AAAA;AAGf,UAAM,eAAe,MAAMC,YAAG,YAAyB,OAAO,GAAG,QAAQ,SAAS,IAAI,UAAU,CAAC;AACjG,UAAM,cAAc,MAAMA,YAAG,YAA+B,YAAY,GAAG,MAAM;AAEjF,WAAO;AAAA,MACL;AAAA,MACA,OAAO,aAAa,SAAS;AAAA,IAC/B;AAAA,EACF;AACF;;;AC5FA,SAAS,OAAAC,OAAK,YAAAC,iBAAgB;AAgCvB,IAAM,SAASC;AAAA,EACpB,EAAE,QAAQ,MAAM,QAAQ,OAAO,MAAM,oBAAoB;AAAA,EACzD,OAAO,WAAW;AAChB,UAAM,UAAoB,CAAC;AAC3B,UAAM,SAAgB,CAAC;AACvB,QAAI,aAAa;AAEjB,QAAI,OAAO,SAAS,QAAW;AAC7B,cAAQ,KAAK,WAAW,YAAY,EAAE;AACtC,aAAO,KAAK,OAAO,IAAI;AAAA,IACzB;AACA,QAAI,OAAO,WAAW,QAAW;AAC/B,cAAQ,KAAK,aAAa,YAAY,EAAE;AACxC,aAAO,KAAK,OAAO,MAAM;AAAA,IAC3B;AACA,QAAI,OAAO,aAAa,QAAW;AACjC,cAAQ,KAAK,eAAe,YAAY,EAAE;AAC1C,aAAO,KAAK,OAAO,QAAQ;AAAA,IAC7B;AACA,QAAI,OAAO,gBAAgB,QAAW;AACpC,cAAQ,KAAK,kBAAkB,YAAY,EAAE;AAC7C,aAAO,KAAK,OAAO,WAAW;AAAA,IAChC;AACA,QAAI,OAAO,eAAe,QAAW;AACnC,cAAQ,KAAK,kBAAkB,YAAY,EAAE;AAC7C,aAAO,KAAK,OAAO,UAAU;AAAA,IAC/B;AACA,QAAI,OAAO,aAAa,QAAW;AACjC,cAAQ,KAAK,eAAe,YAAY,EAAE;AAC1C,aAAO,KAAK,OAAO,QAAQ;AAAA,IAC7B;AACA,QAAI,OAAO,kBAAkB,QAAW;AACtC,cAAQ,KAAK,qBAAqB,YAAY,EAAE;AAChD,aAAO,KAAK,OAAO,aAAa;AAAA,IAClC;AACA,QAAI,OAAO,SAAS,QAAW;AAC7B,cAAQ,KAAK,WAAW,YAAY,EAAE;AACtC,aAAO,KAAK,OAAO,IAAI;AAAA,IACzB;AACA,QAAI,OAAO,UAAU,QAAW;AAC9B,cAAQ,KAAK,YAAY,YAAY,EAAE;AACvC,aAAO,KAAK,OAAO,KAAK;AAAA,IAC1B;AACA,QAAI,OAAO,gBAAgB,QAAW;AACpC,cAAQ,KAAK,mBAAmB,YAAY,EAAE;AAC9C,aAAO,KAAK,OAAO,WAAW;AAAA,IAChC;AAEA,YAAQ,KAAK,oBAAoB;AAEjC,UAAM,QAAQ;AAAA;AAAA,YAEN,QAAQ,KAAK,IAAI,CAAC;AAAA,oBACV,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ1B,UAAM,SAAS,MAAMC,YAAG,YAAyB,OAAO,GAAG,QAAQ,OAAO,EAAE;AAE5E,QAAI,CAAC,QAAQ;AACX,YAAMC,UAAS,SAAS,uBAAuB;AAAA,IACjD;AAEA,WAAO;AAAA,EACT;AACF;;;ACrGA,SAAS,OAAAC,aAAW;AACpB,SAAS,cAAc;AAGvB,IAAM,gBAAgB,IAAI,OAAO,WAAW,EAAE,QAAQ,MAAM,CAAC;AAQtD,IAAM,eAAeC;AAAA,EAC1B,EAAE,QAAQ,MAAM,QAAQ,QAAQ,MAAM,cAAc;AAAA,EACpD,OAAO,EAAE,SAAS,MAAM;AACtB,UAAM,WAAW,MAAMC,YAAG;AAAA;AAAA,gBAEd,QAAQ;AAAA;AAAA;AAIpB,UAAM,aAAa,GAAG,SAAU,EAAE,IAAI,QAAQ;AAC9C,UAAM,EAAE,IAAI,IAAI,MAAM,cAAc,gBAAgB,YAAY,EAAE,KAAK,KAAK,CAAC;AAE7E,WAAO;AAAA,MACL,UAAU,SAAU;AAAA,MACpB,WAAW;AAAA,IACb;AAAA,EACF;AACF;AAaO,IAAM,gBAAgBD;AAAA,EAC3B,EAAE,QAAQ,MAAM,QAAQ,QAAQ,MAAM,4BAA4B;AAAA,EAClE,OAAO,EAAE,SAAS,MAAM;AACtB,UAAM,SAAS,MAAMC,YAAG;AAAA,gDACoB,QAAQ;AAAA;AAGpD,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI,MAAM,kBAAkB;AAAA,IACpC;AAEA,UAAM,aAAa,GAAG,QAAQ,IAAI,OAAO,QAAQ;AACjD,UAAM,WAAW,MAAM,cAAc,SAAS,UAAU;AAGxD,UAAM,OAAO,SAAS,SAAS,SAAS,CAAC;AACzC,UAAM,SAAmB,CAAC;AAC1B,QAAI,eAAe;AAEnB,eAAW,OAAO,MAAM;AACtB,UAAI;AACF,cAAMA,YAAG;AAAA;AAAA,oBAEG,IAAI,IAAI,KAAK,IAAI,MAAM,KAAK,IAAI,QAAQ,KAAK,IAAI,eAAe,EAAE,KAAK,IAAI,YAAY,KAAK;AAAA;AAExG;AAAA,MACF,SAAS,KAAK;AACZ,eAAO,KAAK,OAAO,eAAe,OAAO,SAAS,CAAC,KAAK,GAAG,EAAE;AAAA,MAC/D;AAAA,IACF;AAEA,UAAMA,YAAG;AAAA;AAAA,qEAEwD,YAAY,cAAc,KAAK,UAAU,MAAM,CAAC;AAAA,mBAClG,QAAQ;AAAA;AAGvB,WAAO;AAAA,MACL,SAAS,OAAO,WAAW;AAAA,MAC3B,WAAW;AAAA,MACX,QAAQ,OAAO,SAAS,IAAI,SAAS;AAAA,IACvC;AAAA,EACF;AACF;AAEA,SAAS,SAAS,SAMf;AACD,QAAM,QAAQ,QAAQ,MAAM,IAAI,EAAE,OAAO,UAAQ,KAAK,KAAK,CAAC;AAC5D,QAAM,UAAU,MAAM,CAAC,EAAE,YAAY,EAAE,MAAM,GAAG,EAAE,IAAI,OAAK,EAAE,KAAK,CAAC;AAEnE,QAAM,UAAU,QAAQ,UAAU,OAAK,EAAE,SAAS,MAAM,CAAC;AACzD,QAAM,YAAY,QAAQ,UAAU,OAAK,EAAE,SAAS,QAAQ,CAAC;AAC7D,QAAM,cAAc,QAAQ,UAAU,OAAK,EAAE,SAAS,UAAU,KAAK,EAAE,SAAS,QAAQ,KAAK,EAAE,SAAS,OAAO,CAAC;AAChH,QAAM,UAAU,QAAQ,UAAU,OAAK,EAAE,SAAS,aAAa,KAAK,EAAE,SAAS,MAAM,CAAC;AACtF,QAAM,cAAc,QAAQ,UAAU,OAAK,EAAE,SAAS,UAAU,CAAC;AAEjE,SAAO,MAAM,MAAM,CAAC,EAAE,IAAI,UAAQ;AAChC,UAAM,OAAO,KAAK,MAAM,GAAG,EAAE,IAAI,OAAK,EAAE,KAAK,CAAC;AAC9C,WAAO;AAAA,MACL,MAAM,IAAI,KAAK,KAAK,OAAO,CAAC;AAAA,MAC5B,QAAQ,WAAW,KAAK,SAAS,CAAC;AAAA,MAClC,UAAU,KAAK,WAAW,KAAK;AAAA,MAC/B,aAAa,WAAW,IAAI,KAAK,OAAO,IAAI;AAAA,MAC5C,UAAU,eAAe,IAAI,KAAK,WAAW,IAAI;AAAA,IACnD;AAAA,EACF,CAAC;AACH;;;ACjHA,SAAS,eAAe;AAExB,IAAO,yBAAQ,IAAI,QAAQ,QAAQ;;;ACFnC,SAAS,WAAAC,gBAAe;AAExB,IAAOC,0BAAQ,IAAID,SAAQ,aAAa;;;ACFxC,SAAS,WAAAE,gBAAe;AAExB,IAAOC,0BAAQ,IAAID,SAAQ,IAAI;;;ACF/B,SAAS,WAAAE,gBAAe;AAExB,IAAOC,0BAAQ,IAAID,SAAQ,MAAM;;;ACFjC,SAAS,WAAAE,gBAAe;AAExB,IAAOC,0BAAQ,IAAID,SAAQ,WAAW;;;ACFtC,SAAS,WAAAE,gBAAe;AAExB,IAAOC,0BAAQ,IAAID,SAAQ,UAAU;;;ACFrC,SAAS,WAAAE,gBAAe;AAExB,IAAOC,0BAAQ,IAAID,SAAQ,QAAQ;;;A5BkCnC,IAAM,WAAkB;AAAA,EACpB;AACJ;AAEA,IAAM,WAAsB;AAAA,EACxB;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,MAAK,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACpF,aAAwBE,wBAAQ,IAAI,eAAe,CAAC;AAAA,EACxD;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,MAAK,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACpF,aAAwBA,wBAAQ,IAAI,eAAe,CAAC;AAAA,EACxD;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,OAAM,QAAO,OAAM,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACtF,aAAwBA,wBAAQ,IAAI,eAAe,CAAC;AAAA,EACxD;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,OAAM,QAAO,OAAM,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACtF,aAAwBA,wBAAQ,IAAI,eAAe,CAAC;AAAA,EACxD;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,MAAK,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACpF,aAAwBA,wBAAQ,IAAI,eAAe,CAAC;AAAA,EACxD;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,MAAK,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACpF,aAAwBA,wBAAQ,IAAI,eAAe,CAAC;AAAA,EACxD;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,MAAK,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACpF,aAAwBA,wBAAQ,IAAI,eAAe,CAAC;AAAA,EACxD;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,MAAK,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACpF,aAAwBA,wBAAQ,IAAI,eAAe,CAAC;AAAA,EACxD;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,MAAK,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACpF,aAAwBA,wBAAQ,IAAI,eAAe,CAAC;AAAA,EACxD;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,OAAM,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACrF,aAA0BA,wBAAQ,IAAI,eAAe,CAAC;AAAA,EAC1D;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,MAAK,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACpF,aAA0BA,wBAAQ,IAAI,eAAe,CAAC;AAAA,EAC1D;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,MAAK,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACpF,aAA4B,uBAAQ,IAAI,eAAe,CAAC;AAAA,EAC5D;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,MAAK,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACpF,aAA4B,uBAAQ,IAAI,eAAe,CAAC;AAAA,EAC5D;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmBC;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,MAAK,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACpF,aAA8BD,wBAAQ,IAAI,eAAe,CAAC;AAAA,EAC9D;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmBE;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,MAAK,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACpF,aAA8BF,wBAAQ,IAAI,eAAe,CAAC;AAAA,EAC9D;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,OAAM,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACrF,aAA8BA,wBAAQ,IAAI,eAAe,CAAC;AAAA,EAC9D;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,OAAM,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACrF,aAA8BA,wBAAQ,IAAI,eAAe,CAAC;AAAA,EAC9D;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,MAAK,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACpF,aAA+BA,wBAAQ,IAAI,eAAe,CAAC;AAAA,EAC/D;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmBC;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,MAAK,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACpF,aAAiCD,wBAAQ,IAAI,eAAe,CAAC;AAAA,EACjE;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,OAAM,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACrF,aAAiCA,wBAAQ,IAAI,eAAe,CAAC;AAAA,EACjE;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmBE;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,MAAK,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACpF,aAAiCF,wBAAQ,IAAI,eAAe,CAAC;AAAA,EACjE;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,OAAM,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACrF,aAAiCA,wBAAQ,IAAI,eAAe,CAAC;AAAA,EACjE;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,OAAM,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACrF,aAA4BA,wBAAQ,IAAI,eAAe,CAAC;AAAA,EAC5D;AAAA,EACA;AAAA,IACI,UAAU;AAAA,MACN,SAAmB;AAAA,MACnB,MAAmB;AAAA,MACnB,SAAmB;AAAA,MACnB,KAAmB;AAAA,MACnB,kBAAmB;AAAA,MACnB,mBAAmB;AAAA,IACvB;AAAA,IACA,iBAAiB,EAAC,UAAS,MAAK,QAAO,OAAM,SAAQ,OAAM,YAAW,OAAM,QAAO,CAAC,EAAC;AAAA,IACrF,aAA4BA,wBAAQ,IAAI,eAAe,CAAC;AAAA,EAC5D;AACJ;AAEA,iBAAiB,QAAQ;AACzB,iBAAiB,QAAQ;AAEzB,MAAM,IAAI,YAAY,GAAG;",
  "names": ["init_auth", "init_auth", "createRule", "init_auth", "api", "api", "api", "api", "getAuthData", "init_auth", "api", "api", "init_auth", "api", "api", "api", "secret", "init_auth", "api", "init_auth", "api", "SQLDatabase", "db_default", "api", "db_default", "init_auth", "api", "api", "db_default", "init_auth", "api", "create", "api", "db_default", "init_auth", "api", "list", "api", "db_default", "api", "api", "db_default", "init_auth", "api", "api", "db_default", "init_auth", "api", "create", "api", "db_default", "api", "api", "db_default", "init_auth", "api", "list", "api", "db_default", "api", "APIError", "api", "db_default", "APIError", "api", "api", "db_default", "Service", "encore_service_default", "Service", "encore_service_default", "Service", "encore_service_default", "Service", "encore_service_default", "Service", "encore_service_default", "Service", "encore_service_default", "encore_service_default", "create", "list"]
}
